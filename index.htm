<?php
	include '../base/lc_header.php';
	include '../base/lc_util.php';
?>

<!--------------------------- Body Begin ---------------------------------------->

<div class="Section1">

<br>
<h1>◈HLSL 기초◈</h1>

<p class=MsoNormal><span lang=EN-US>HLSL(High Level Shading Language)</span>은 단어
그대로 쉐이더에 대한 고 수준 언어입니다<span lang=EN-US>. </span>어셈블리 명령어 형식으로 작성한 정점 쉐이더와 픽셀 쉐이더
코드는 사용자에게 언어의 사용<span lang=EN-US>, </span>이해와 더불어 가독성과 융통성에 많은 부담을 줍니다<span
lang=EN-US>. HLSL</span>은 저 수준 언어인 쉐이더 명령어를<span lang=EN-US> C</span>나 파스칼과 같이 고
수준의 언어로 대신하게 되어 저 수준 언어의 어려운 부분들을 해소시켜줍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>고수준 언어로 작성된 쉐이더 프로그램은 컴파일 과정에서 필요한 명령어들을 컴파일러가 자동으로 추가합니다<span
lang=EN-US>. </span>마이크로소프트에서<span lang=EN-US> HLSL</span>으로 작성한 고 수준 언어를 컴파일해서
만든 명령어와 저 수준 쉐이더 명령어 만으로 작성한 명령어들을 비교한 자료를 발표한 적이 있는데 이 발표에 의하면 <span
lang=EN-US>HLSL</span>을 사용하더라도 둘의 차이가 크지 않음을 보인다고 합니다<span lang=EN-US>. </span>따라서<span
lang=EN-US> HLSL</span>을 사용한 것과 직접 쉐이더 명령어를 사용한 결과는 차이가 없다라고 볼 수 있으므로 사용자는<span
lang=EN-US> HLSL</span>을 이용하는 것이 가독성<span lang=EN-US>, </span>편리성 등 여러모로 유리한 점이
많이 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;</span>저 수준으로
작성한 정점 쉐이더<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>vs_1_1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_position</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>v0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_color</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>v1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>m4x4</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>oPos</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>v0</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>c0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mov</span><span lang=PT-BR>&nbsp; </span><span
lang=PT-BR style='color:blue'>oD0</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:blue'>v1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;HLSL</span>로
작성한 정점 쉐이더<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_Bright;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4x4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_mtWVP;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>SvsOut</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Dif : </span><span
lang=EN-US style='color:blue'>COLOR0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>SvsOut</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VtxPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Dif : </span><span
lang=EN-US style='color:blue'>COLOR0</span><span lang=EN-US> )</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>SvsOut</span><span lang=EN-US> Out = (</span><span
lang=EN-US style='color:blue'>SvsOut</span><span lang=EN-US>)</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Pos
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>(Pos, </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>), m_mtWVP);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Dif
= Dif * m_Bright;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>두 코드를 비교해 보면 어셈블리 형식의 저 수준으로 작성한
쉐이더 코드가 훨씬 간결한 것을 알 수 있습니다<span lang=EN-US>. </span>하지만 <span lang=EN-US>HLSL</span>로
작성한 것이 가독성이 빠르고 사용이 편리해 보입니다<span lang=EN-US>. </span>여러분이 저 수준 형식을 사용한다면 연산이 많아질수록
오히려 손이 더 가는 형태가 되어 불편합니다<span lang=EN-US>. </span>예를 들어 상수 설정이 많아지면 <span
lang=EN-US>c0, c1 </span>이러한 이름을 사용하는 것보다 <span lang=EN-US>“m_mtWVP”</span>와 같이
사용자가 직관적으로 정의한 변수를 사용하는 것이 좋고<span lang=EN-US>, </span>또한 함수도 만들어서 사용 할 수 있어서 저수준
형식보다 <span lang=EN-US>HLSL</span>이 장점이 많습니다<span lang=EN-US>. </span>그리고 이후에 알게
되겠지만 저 수준으로 작성하는 것이 꼭 코드의 길이가 짧아지는 것은 아니라는 것을 알게 될 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>여러분이 <span lang=EN-US>HLSL</span>을 빨리 익히는 방법은 이전 강의에서 저 수준 언어로
작성된 코드들를<span lang=EN-US> HLSL</span>로 바꾸어 보는 것이 가장 무난합니다<span lang=EN-US>. </span>그렇다고
반드시 저 수준 언어를 알아야 할 필요는 없습니다<span lang=EN-US>. </span>보통<span lang=EN-US> HLSL</span>은<span
lang=EN-US> 100 Line </span>정도에서 작성되므로 만약 여러분이<span lang=EN-US> C</span>언어에 익숙하다면
<span lang=EN-US>HLSL</span>에 대한 문법과 함수들을 연습하면 몇일 이내로 배울 수 있습니다<span
lang=EN-US>. HLSL </span>함수 또한 걱정할 것 없는 것이 생각만큼 많은 숫자도 아니고 대부분 수학과 관련된 함수들이고 직관적으로
이해가 되기 때문에<span lang=EN-US> HLSL</span>로 장면에 대한 간단한 표현부터 연습하면 몇 일 이내로 쉽게 배울 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>1. HLSL </span><span
style='font-size:16.0pt'>연습</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>1.1 </span><span
style='font-size:14.0pt'>간단한<span lang=EN-US> HLSL</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>HLSL</span>은 저 수준
작성과 마찬가지로 문자열 또는 파일로 작성할 수 있습니다<span lang=EN-US>. </span>예를 들어 다음과 같이 정점의 위치를 출력하는
쉐이더 코드를 저 수준과 <span lang=EN-US>HLSL</span>로 작성해 봅시다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;</span>저 수준<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:fuchsia'>&quot;vs_1_1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n&quot;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:fuchsia'>&quot;dcl_position v0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n&quot;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:fuchsia'>&quot;mov oPos, v0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n&quot;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;HLSL&gt;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:fuchsia'>&quot;float4 VtxPrc(float3
Pos : POSITION) : POSITION \n&quot;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:fuchsia'>&quot;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n&quot;</span></p>

<p class=MsoNormal><span lang=PT-BR style='color:fuchsia'>&quot;&nbsp;&nbsp;&nbsp;
return float4(Pos, 1);&nbsp;&nbsp; \n&quot;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:fuchsia'>&quot;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n&quot;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal>저 수준 언어를 기계어로 번역하는 것을<span lang=EN-US> Assemble</span>이라 하고 고
수준 언어는<span lang=EN-US> Compile</span>이라 합니다<span lang=EN-US>. </span>저 수준으로 작성한
쉐이더는 <span lang=EN-US>D3DXAssembleShader() </span>함수를 사용했습니다<span lang=EN-US>. </span>이와
대응되는 <span lang=EN-US>HLSL </span>함수는 <span lang=EN-US>D3DXCompileShader() </span>함수
입니다<span lang=EN-US>. HLSL </span>문법으로 작성한 쉐이더 코드는 다음과 같이 컴파일합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LPD3DXBUFFER</span><span lang=EN-US>&nbsp;&nbsp; pShd&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LPD3DXBUFFER</span><span lang=EN-US>&nbsp;&nbsp; pErr&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hr = </span><span
lang=EN-US style='color:#880000'>D3DXCompileShader</span><span lang=EN-US>(sHlsl,
iLen</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>NULL</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:fuchsia'>&quot;VtxPrc&quot;</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>//
</span><span style='color:green'>시작 함수</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:fuchsia'>&quot;vs_1_1&quot;</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>//
</span><span style='color:green'>쉐이더 버전</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
dwFlags</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
&amp;pShd &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>컴파일 쉐이더</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
&amp;pErr &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// Error</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
&amp;m_pTbl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>상수 테이블</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>C</span>언어로 작성한 응용프로그램은<span lang=EN-US>
int main() </span>함수가 필요합니다<span lang=EN-US>. HLSL</span>은 사용자 함수를 지원하기 때문에 <span
lang=EN-US>D3DXCompileShader() </span>함수의<span lang=EN-US> 4 </span>번째 문자열 인수에 쉐이더
실행의 시작 함수를 지정해야 합니다<span lang=EN-US>. </span>또한 정점 쉐이더 또는 픽셀 쉐이더 버전을 설정해야 하며<span
lang=EN-US>, </span>상수 레지스터에 데이터 연결을 담당하는 상수 테이블을 생성할 수 있도록 상수 테이블 주소를 지정합니다<span
lang=EN-US>. </span>파일에서 작성한<span lang=EN-US> HLSL</span>은<span lang=EN-US>
D3DXCompileShaderFromFile()</span>함수를 사용 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>D3DXCompileShader() </span>함수는 단지<span
lang=EN-US> HLSL</span>로 작성한 쉐이더 코드를 컴파일하거나 실패에 대한 문법 에러를 검사하는 기능만 수행하기 때문에 컴파일
한 결과를 메모리에 적재하기 위해서 정점 쉐이더 또는 픽셀 쉐이더 객체를 생성합니다<span lang=EN-US>. </span>이 부분은 저
수준과 동일합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>CreateVertexShader</span><span lang=EN-US>( (</span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US>*)pShd-&gt;</span><span
lang=EN-US style='color:#880000'>GetBufferPointer</span><span lang=EN-US>() ,
&amp;m_pVs);</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>CreatePixelShader</span><span lang=EN-US>( (</span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US>*)pShd-&gt;</span><span
lang=EN-US style='color:#880000'>GetBufferPointer</span><span lang=EN-US>() ,
&amp;m_pPs);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>HLSL</span>은 쉐이더 작성을 고급 언어로만 하겠다는 뜻이므로 저 수준과
마찬가지로 렌더링 파이프라인에 적용되는 정점 스트림에 대한 정점 선언자<span lang=EN-US>(Vertex Declarator)</span>를
만들어야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DVERTEXELEMENT9</span><span lang=EN-US> vertex_decl[</span><span
lang=EN-US style='color:#A000A0'>MAX_FVF_DECL_SIZE</span><span lang=EN-US>]={</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>D3DXDeclaratorFromFVF</span><span
lang=EN-US>(</span><span lang=EN-US style='color:blue'>Vtx</span><span
lang=EN-US>::</span><span lang=EN-US style='color:#A000A0'>FVF</span><span
lang=EN-US>, vertex_decl);</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>CreateVertexDeclaration</span><span lang=EN-US>(
vertex_decl, &amp;m_pFVF );</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>렌더링에서 프로그램 가능한 파이프라인을 사용하는 방법은 저 수준과 거의 동일하며 쉐이더의 전역 변수 설정은 컴파일할
때 생성한 상수 테이블 객체를 이용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>1. </span>정점 쉐이더 또는 픽셀 쉐이더 사용을 명시함으로써 프로그램 가능한
파이프라인 사용을 알린다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>2. </span>정점 선언자를 디바이스에 연결한다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>3. </span>정점 선언 객체로 정점 데이터의 형식을 파이프라인에 알린다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>4. </span>상수 테이블을 사용해서 쉐이더의 전역 변수 값을 설정한다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>5. </span>정점을 그린다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>6. </span>정점 쉐이더 또는 픽셀 쉐이더 객체 사용을 해제해서 고정 기능
파이프라인 사용으로 돌아 온다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=DE>m_pDev-&gt;</span><span lang=DE
style='color:#880000'>SetVertexShader</span><span lang=DE>(…);</span></p>

<p class=MsoNormal><span lang=DE>m_pDev-&gt;</span><span lang=DE
style='color:#880000'>SetPixelShader</span><span lang=DE>(…);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>m_pDev-&gt;</span><span
lang=DE style='color:#880000'>SetVertexDeclaration</span><span lang=DE>(…);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>m_pDev-&gt;</span><span
lang=DE style='color:#880000'>DrawPrimitiveUP</span><span lang=DE>(…);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>m_pDev-&gt;</span><span
lang=DE style='color:#880000'>SetVertexDeclaration</span><span lang=DE>(</span><span
lang=DE style='color:#A000A0'>NULL</span><span lang=DE>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>m_pDev-&gt;</span><span
lang=DE style='color:#880000'>SetVertexShader</span><span lang=DE>(</span><span
lang=DE style='color:#A000A0'>NULL</span><span lang=DE>);</span></p>

<p class=MsoNormal><span lang=DE>m_pDev-&gt;</span><span lang=DE
style='color:#880000'>SetPixelShader</span><span lang=DE>(</span><span lang=DE
style='color:#A000A0'>NULL</span><span lang=DE>);</span></p>

<p class=MsoNormal><span lang=DE>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=213 height=159
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image001.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>간단한<span lang=EN-US> HLSL: <a
href="https://github.com/3dapi/bs25_shader2/raw/master/hs1_basic1.zip">hs1_basic1.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>1.2 HLSL </span><span
style='font-size:14.0pt'>기초</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Assembly </span>형식의
저 수준 쉐이더 언어는 사용법은 약간 까다롭지만 문법이 간단해서 프로그래머가 기억해야할 내용이 많지 않았습니다<span lang=EN-US>.
</span>하지만<span lang=EN-US> HLSL</span>은<span lang=EN-US> C</span>언어와 같은 고급 언어로
구성되어 있어서 문법에 대한 지식이 필요합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='font-size:12.0pt'>1.2.1 </span><span style='font-size:12.0pt'>자료 형<span
lang=EN-US>(Data Type)</span></span></p>

<p class=MsoNormal style='word-break:keep-all'>저 수준 쉐이더에서 모든 데이터는 저장 장소 레지스터 이름을
그대로 사용해서 자료형이라는 것이 필요하지 않았지만<span lang=EN-US> HLSL</span>은 프로그래머가 사용하는 변수 또는 상수를
컴파일러가 적절히 번역할 수 있도록 자료형을 사용 하며 <span lang=EN-US>HLSL</span>의 기본 자료 형<span
lang=EN-US>(Data Type)</span>과 복합 형<span lang=EN-US>(Complex Type)</span>으로 구분합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>기본 자료 형은 크게<span lang=EN-US>
Scalar Type(</span>형<span lang=EN-US>), Vector </span>형<span lang=EN-US>,
Matrix </span>형으로 나눕니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Scalar Type</span>는
단일 자료로 형태로<span lang=EN-US> true/false</span>만 가지는<span lang=EN-US> bool </span>형<span
lang=EN-US>, 32bit</span>인<span lang=EN-US> int </span>형<span lang=EN-US>, 16</span>비트
부동 소수점<span lang=EN-US> half</span>형<span lang=EN-US>, 32</span>비트<span
lang=EN-US> float </span>형<span lang=EN-US>, 64</span>비트 부동소수점<span lang=EN-US>
double </span>형이 있습니다<span lang=EN-US>. </span>이중에서 가장 많이 사용되는 타입은<span
lang=EN-US> float </span>형과<span lang=EN-US> int </span>형입니다<span lang=EN-US>. </span>때로는<span
lang=EN-US> GPU</span>의 특성에 따라<span lang=EN-US> half, double</span>은 지원이 안될 수 있으므로
타입 결정이 어려우면<span lang=EN-US> float </span>형을 사용하는 것이 가장 무난합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Scalar </span>형을
사용하는 방법은 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>선언<span lang=EN-US>: </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> f;</span></p>

<p class=MsoNormal style='word-break:keep-all'>선언과 동시에 초기화<span lang=EN-US>: </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> f = </span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>1f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>문법이<span lang=EN-US> C</span>언어와
같습니다<span lang=EN-US>. Scalar</span>형은 배열을 만들어 사용할 수 있습니다<span lang=EN-US>. </span>다음은<span
lang=EN-US> float</span>형 배열을 만들고 초기화 방법과 데이터 접근에 대한 예입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>배열<span lang=EN-US>: </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> f[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>];</span></p>

<p class=MsoNormal style='word-break:keep-all'>배열 선언과 동시에 초기화<span lang=EN-US>:
</span><span lang=EN-US style='color:blue'>float</span><span lang=EN-US> f[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>] = {</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>f</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>f</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>3</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>f</span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'>배열 접근<span lang=EN-US>: f[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:red'>10</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Scalar Type</span>의
연산은<span lang=EN-US> C</span>언어의 산술 연산<span lang=EN-US> +, -, *, /, {+|-|*|/}= </span>등이
가능하고 정수 형의 경우 단항 연산<span lang=EN-US> ++, --</span>을 사용할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Vector Type</span>은
자료를 표현하기 위해서<span lang=EN-US> 2</span>개 이상의 자료가 결합된 형태로 가장 기본적인 형태는<span
lang=EN-US> vector</span>이며<span lang=EN-US> vector</span>는<span lang=EN-US>
float</span>형<span lang=EN-US> 4</span>개가 하나의 자료인<span lang=EN-US> float4 </span>형입니다<span
lang=EN-US>. vector </span>형은 자료를 접근하는 방법이<span lang=EN-US> x, y, z, w </span>또는<span
lang=EN-US> r, g, b, a</span>를 이용하거나 임의 접근 연산자<span lang=EN-US> []</span>를 사용합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>만약<span lang=EN-US> vector</span>의
전체 성분을 교체할 때는<span lang=EN-US> vector </span>생성자를 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>vector </span>선언<span
lang=EN-US>: </span><span lang=EN-US style='color:blue'>vector</span><span
lang=EN-US> v;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>vector </span>선언과
동시에 초기화<span lang=EN-US>: </span><span lang=EN-US style='color:blue'>vector</span><span
lang=EN-US> v&nbsp; = {</span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>,</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>,</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>vector </span>접근<span
lang=EN-US>1: v.y = </span><span lang=EN-US style='color:red'>3</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US>; or v.g = </span><span lang=EN-US style='color:red'>5</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>vector </span>접근<span
lang=EN-US>2: v[</span><span lang=EN-US style='color:red'>2</span><span
lang=EN-US>]=</span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0f</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>vector </span>생성자<span
lang=EN-US>: v= </span><span lang=EN-US style='color:blue'>vector</span><span
lang=EN-US> (</span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Vector Type</span>는
<span lang=EN-US>Scalar </span>형에 숫자를 붙여 차원을 붙여서 사용하기도 합니다<span lang=EN-US>. </span>예를
들어<span lang=EN-US> float </span>형에 대해서<span lang=EN-US> float2, float3, float4
</span>형이 있고<span lang=EN-US>, int </span>형에 대해서<span lang=EN-US> int2, int3,
int4 </span>형이 있습니다<span lang=EN-US>. </span>이들은<span lang=EN-US>
vector&lt;type, dimension&gt;</span>형태와 동등합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float2</span><span lang=EN-US> </span>≡ <span lang=EN-US
style='color:blue'>vector</span><span lang=EN-US>&lt;</span><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US> </span>≡ <span lang=EN-US
style='color:blue'>vector</span><span lang=EN-US>&lt;</span><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>3</span><span lang=EN-US>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span>≡ <span lang=EN-US
style='color:blue'>vector</span><span lang=EN-US>&lt;</span><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>4</span><span lang=EN-US>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>int3</span><span lang=EN-US> </span>≡ <span lang=EN-US
style='color:blue'>vector</span><span lang=EN-US>&lt;</span><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>3</span><span lang=EN-US>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>int4</span><span lang=EN-US> </span>≡ <span lang=EN-US
style='color:blue'>vector</span><span lang=EN-US>&lt;</span><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>4</span><span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>선언과 동시에 초기화<span lang=EN-US>: </span><span lang=EN-US
style='color:blue'>vector</span><span lang=EN-US>&lt;</span><span lang=EN-US
style='color:blue'>double</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>4</span><span lang=EN-US>&gt; v = {</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>., </span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>., </span><span lang=EN-US
style='color:red'>3</span><span lang=EN-US>., </span><span lang=EN-US
style='color:red'>4</span><span lang=EN-US>.};</span></p>

<p class=MsoNormal>성분 접근<span lang=EN-US>1: v[</span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>]= </span><span lang=EN-US
style='color:red'>3</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>4</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이들 숫자가 붙은 자료형도 <span lang=EN-US>Vector Type </span>이므로<span
lang=EN-US> vector</span>와 마찬가지로<span lang=EN-US> vector </span>생성자를 이용하거나 자신의<span
lang=EN-US> Type</span>에 대한 생성자를 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>v</span><span lang=EN-US> = </span><span lang=EN-US
style='color:blue'>vector</span><span lang=EN-US>&lt;</span><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>4</span><span lang=EN-US>&gt;(</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>v</span><span
lang=EN-US> = </span><span lang=EN-US style='color:blue'>float4</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>,
</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>주의할 것은 <span lang=EN-US>Vector Type</span>을<span lang=EN-US>
Scalar </span>변수 또는 상수로 설정하면 변수의 모든 값은<span lang=EN-US> Scalar </span>값으로 설정이 됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US> k =</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>3f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US>&nbsp; v;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>v&nbsp; = k;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// v.x = v.y = v.z = v.w = k</span></p>

<p class=MsoNormal><span lang=EN-US>v&nbsp; = </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'> 0f</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// v.x = v.y = v.z = v.w = 1.0f</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Vector Type</span>은
<span lang=EN-US>swizzling </span>가능합니다<span lang=EN-US>. </span>단<span
lang=EN-US>, xyzw</span>와<span lang=EN-US> rgba</span>의 혼용은 허용이 안됩니다<span
lang=EN-US>. </span>다음은<span lang=EN-US> Vector Type</span>에서 <span lang=EN-US>swizzling</span>이
안되는 예입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>v.xg, v.yr</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>기본 자료 형인 <span lang=EN-US>Matrix
Type</span>는 행렬을 표현한 자료 형입니다<span lang=EN-US>. </span>행렬 자료 형은<span lang=EN-US>
matrix </span>키워드를 사용해서 행과 열의 수로 표현합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>matrix</span><span lang=EN-US> &lt;</span><span lang=EN-US
style='color:blue'>type</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>row</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>column</span><span lang=EN-US>&gt;: type: </span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>3x3 float </span>형
행렬<span lang=EN-US>: </span><span lang=EN-US style='color:blue'>matrix</span><span
lang=EN-US>&lt;</span><span lang=EN-US style='color:blue'>float</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>3</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>3</span><span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>vector</span>와 마찬가지로
숫자로 행과 열을 표현하기도 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US>{row}x{column}: </span><span
lang=EN-US style='color:blue'>int2x2</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>int3x3</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>int4x4</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>int4x3</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US>{row}x{column}: </span><span
lang=EN-US style='color:blue'>float2x2</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float3x3</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float4x4</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float4x3</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>행렬의 성분 접근에 대해서 행 우선 지정은<span
lang=EN-US> &quot;row_major&quot; </span>키워드를 사용하고 열 우선 지정의 경우는<span
lang=EN-US> &quot;col_major&quot; </span>키워드를 사용합니다<span lang=EN-US>. </span>이들은<span
lang=EN-US> GPU </span>내부에서 처리되는 방식을 결정하는 것이기 때문에 연산의 결과에는 영향을 주지 않습니다<span
lang=EN-US>. </span>만약 이들 지정이 없으면<span lang=EN-US> default</span>로 행 우선 순위 방식으로
행렬에 대해서 연산이 진행이 되고 행렬과 벡터의 연산에서 벡터를 좌측에 놓는 벡터<span lang=EN-US> * </span>행렬 형태를 취하기
때문에 <span lang=EN-US>HLSL</span>의 행렬형은 <span lang=EN-US>&quot;col_major&quot;</span>가
됩니다<span lang=EN-US>. </span>또한 저 수준 언어와 다르게 미리 행렬 변수 값을 <span lang=EN-US>Transpose</span>를
할 필요가 없습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>행렬의 성분 접근은 행과 열의 인덱스를 이용한 방법<span
lang=EN-US> &quot;_m+</span>인덱스 숫자<span lang=EN-US>&quot;</span>를 이용한 방법<span
lang=EN-US>, [] </span>연산자를 이용한 방법 등<span lang=EN-US> 3</span>가지가 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>._m{row}{col}&nbsp; →
._m00 ~ ._m33</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>._{row}{col}&nbsp;&nbsp; →
._11 ~ . _44</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>.[{row}][{col}]
→ mtTM[</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] ~ mtTM[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>][</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>]</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>행렬은<span lang=EN-US> C</span>언어와
유사하게<span lang=EN-US> 1</span>차원 배열 또는<span lang=EN-US> 2</span>차원 배열을 이용하거나 성분
접근으로 초기화 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float2x2</span><span lang=EN-US> v = {</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>3</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>4</span><span lang=EN-US>};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; →
v._11=</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>, v._12=</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>, v._21=</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>, v._22 = </span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float2x2</span><span lang=EN-US> v = </span><span
lang=EN-US style='color:blue'>float2x2</span><span lang=EN-US>({</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>}, {</span><span lang=EN-US
style='color:red'>3</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>4</span><span lang=EN-US>});</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>행렬도<span lang=EN-US> swizzling</span>이
가능하며 <span lang=EN-US>_m{row}{col}</span>과<span lang=EN-US> _{row}{col}</span>을
혼용하지 않으면 됩니다<span lang=EN-US>. </span>예를 들어 <span lang=EN-US>v._m00_11 </span>과
같은 <span lang=EN-US>swizzling</span>은 허용이 안됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>복합 형<span lang=EN-US>(Complex Type)</span>은 구조체<span
lang=EN-US>(Struct), </span>사용자 정의<span lang=EN-US>(User Define), </span>텍스처 객체<span
lang=EN-US>, </span>샘플러 객체<span lang=EN-US>), Shader </span>객체 등이 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>구조체 형은<span lang=EN-US> C</span>언어의 구조체<span lang=EN-US>(struct)</span>와
유사하며 데이터의 입력<span lang=EN-US>(</span>레지스터<span lang=EN-US>) </span>또는 출력<span
lang=EN-US>(</span>레지스터<span lang=EN-US>)</span>를 지정할 때 사용됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>struct</span><span
lang=EN-US> Svertex</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US> position;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US> normal;</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>struct </span>형 변수의 초기화는 전체를<span
lang=EN-US> 0</span>으로 초기할 때는 상수 <span lang=EN-US style='color:red'>&quot;0&quot;</span>을
해당 구조체의 타입으로 캐스팅합니다<span lang=EN-US>. </span>개별적인 데이터 초기화는<span lang=EN-US> {}</span>를
사용합니다<span lang=EN-US>. </span>성분 접근은<span lang=EN-US> &quot;.&quot; </span>연산자를
사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>초기화<span lang=EN-US>: </span><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> Svertex v={ {</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>}, {</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>5</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>6</span><span lang=EN-US>}};</span></p>

<p class=MsoNormal><span lang=EN-US>0</span>으로 초기화<span lang=EN-US>: Svertex v
= (Svertex)</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal>성분 접근 <span lang=EN-US>- </span>갱신<span lang=EN-US>:
v.normal = </span><span lang=EN-US style='color:blue'>float3</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>,
</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal>성분 접근 <span lang=EN-US>- </span>복사<span lang=EN-US>: </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> t = v.position</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>사용자 정의는<span lang=EN-US> C</span>언어와 동일하게 <span lang=EN-US>typedef
</span>키워드를 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>typdef</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>vector</span><span
lang=EN-US>&lt;</span><span lang=EN-US style='color:blue'>float</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>3</span><span
lang=EN-US>&gt; point;</span></p>

<p class=MsoNormal><span lang=EN-US>point v;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>텍스처 객체는<span lang=EN-US> texture </span>키워드 사용하며 다음은 가장 기본적인
텍스처 객체 생성입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>texture</span><span lang=EN-US> tex0;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>때로는 쉐이더 프로그램에는 전혀 영향을 주지 않고 응용 프로그램에서
텍스처 객체의 이름 등을 참고하고자 할 때<span lang=EN-US> &quot;&lt;&gt;&quot;</span>를 사용해서 주해<span
lang=EN-US>(Annotation)</span>를 지정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>texture</span><span lang=EN-US> tex0 &lt;</span><span
lang=EN-US style='color:blue'>string</span><span lang=EN-US> name =</span><span
lang=EN-US style='color:fuchsia'>&quot;MyTexture.bmp&quot;</span><span
lang=EN-US>&gt;;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>샘플러 객체는 텍스처에서 픽셀을 가져오는 샘플링을 담당하는
객체입니다<span lang=EN-US>. </span>샘플러 타입은<span lang=EN-US> 1</span>차원 텍스처에 대한 <span
lang=EN-US>sampler1D, 2</span>차원 텍스처에 대한 <span lang=EN-US>sampler2D, 3</span>차원
텍스처에 대한 <span lang=EN-US>sampler3D, </span>입방체<span lang=EN-US>(Cube) </span>텍스처에
대한 <span lang=EN-US>samplerCUBE </span>등이 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>단순한 형태의 샘플러 타입 객체를 생성은<span
lang=EN-US> sampler </span>키워드를 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> SampDif;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>샘플링에서 필터링<span lang=EN-US>(Filtering),
</span>어드레싱<span lang=EN-US>(Addressing)</span>은 항상 같이 설정해야합니다<span lang=EN-US>.
</span>샘플러 타입의 객체는<span lang=EN-US> sampler state</span>를 사용해서 이들을 지정할 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler3D</span><span lang=EN-US> MySampler = </span><span
lang=EN-US style='color:blue'>sampler_state</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MinFilter
= LINEAR;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MaxFilter
= LINEAR;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MipFilter
= LINEAR;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AddressU
= Wrap;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AddressV
= Wrap;</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>하나의 샘플러를 가지고 여러 텍스처에 적용하는 것도 좋지만
대부분의 프로그래머들은 각 텍스처마다 샘플러 객체 하나씩 결합하는 형태로 쉐이더를 작성합니다<span lang=EN-US>. </span>다음은
샘플러 객체에 텍스처 객체를 지정하는 예입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>texture</span><span lang=EN-US> tex0;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> SampNor = </span><span
lang=EN-US style='color:blue'>sampler_state</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Texture
= &lt;tex0&gt;;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MinFilter
= LINEAR;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AddressU
= Wrap;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AddressV
= Wrap;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>정점 쉐이더<span lang=EN-US>, </span>픽셀 쉐이더를 통합한 <span
lang=EN-US>ID3DXEffect</span>쉐이더 객체는 저 수준 혹은 고 수준 쉐이더 언어를 전부 사용할 수 있습니다<span
lang=EN-US>. </span>따라서 각 경우에 맞게 컴파일 옵션을 설정해야하는데 고 수준 쉐이더 언어의 컴파일을 저 수준 <span
lang=EN-US>Assemble </span>컴파일할 때 버전을 지정하거나<span lang=EN-US> C</span>언어의<span
lang=EN-US> inline assembly</span>와 같이<span lang=EN-US> HLSL </span>내부에서 저 수준으로
쉐이더를 작성할 때 사용하는 객체가 쉐이더 객체 입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>정점 쉐이더 객체 지정은 <span lang=EN-US>&quot;VertexShader vs&quot; </span>으로
시작하고 픽셀 쉐이더 객체 지정은 <span lang=EN-US>&quot;PixelShader ps&quot; </span>으로 시작합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>만약 여러분이 저 수준 언어로 쉐이더 객체를 생성한다면<span lang=EN-US> asm </span>키워드가
필요합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>VertexShader</span><span lang=EN-US> vs = </span><span
lang=EN-US style='color:blue'>asm</span><span lang=EN-US> {</span><span
lang=EN-US style='color:fuchsia'>&quot;</span><span style='color:fuchsia'>저수준 언어<span
lang=EN-US>&quot;</span></span><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>고 수준으로 작성된 쉐이더 코드는 함수로 구성되어 있으므로<span lang=EN-US> compile </span>키워드<span
lang=EN-US>, </span>대상 쉐이더 버전<span lang=EN-US>, </span>시작 함수를 지정합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>VertexShader</span><span lang=EN-US> vs = </span><span
lang=EN-US style='color:blue'>compile</span><span lang=EN-US> </span><span
lang=EN-US style='color:fuchsia'>&quot;</span><span style='color:fuchsia'>쉐이더 버전<span
lang=EN-US>&quot;</span></span><span lang=EN-US> </span><span lang=EN-US
style='color:fuchsia'>&quot;</span><span style='color:fuchsia'>시작 함수<span
lang=EN-US>()&quot;</span></span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>다음은 픽셀 쉐이더 객체에 대한 저 수준<span
lang=EN-US>, </span>고 수준 생성에 대한 예입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>PixelShader</span><span lang=EN-US> ps = </span><span
lang=EN-US style='color:blue'>asm</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>ps_2_0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>PixelShader</span><span lang=EN-US> ps = </span><span
lang=EN-US style='color:blue'>compile</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>ps_2_0</span><span lang=EN-US> PixelProc();</span><span
lang=EN-US style='color:green'>//PixelProc()</span><span style='color:green'>함수를<span
lang=EN-US> ps_2_0</span>으로 컴파일</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>주해<span lang=EN-US>(Annotation)</span>는 <span lang=EN-US>ID3DXEffect
</span>객체를 사용할 때 파라미터에 사용자 정보를 추가하는 용도로 사용되며 응용프로그램에서<span lang=EN-US> Lookup</span>에
대한 질의 함수를 통해서 정보를 가져옵니다<span lang=EN-US>. HLSL</span>자체에는 영향을 주지 않습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>사용 방법은 <span lang=EN-US>&quot;&lt;&quot;, &quot;&gt;&quot; </span>안에
데이터 타입<span lang=EN-US>, </span>변수 이름<span lang=EN-US>, </span>등호<span
lang=EN-US>, </span>데이터 값 등을 <span lang=EN-US>&quot;;&quot; </span>으로 구분해서 작성합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>texture</span><span lang=EN-US> t&lt; </span><span
lang=EN-US style='color:blue'>string</span><span lang=EN-US> name=</span><span
lang=EN-US style='color:fuchsia'>&quot;MyTexture.bmp&quot;</span><span
lang=EN-US>;&gt;;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>technique</span><span lang=EN-US> MyTech</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>int</span><span lang=EN-US> MyInt = </span><span
lang=EN-US style='color:red'>12</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>string</span><span lang=EN-US>
InputArray = </span><span lang=EN-US style='color:fuchsia'>&quot;MyLookup&quot;</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&gt;&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>이렇게<span lang=EN-US> HLSL</span>에
작성된 주해는 응용 프로그램에서 질의 함수를 가지고 정보를 가져올 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LPCSTR</span><span lang=EN-US> sName;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hAnnotation =
m_pEffect-&gt;</span><span lang=EN-US style='color:#880000'>GetAnnotationByName</span><span
lang=EN-US>(hTech, </span><span lang=EN-US style='color:fuchsia'>&quot;InputArray&quot;</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pEffect-&gt;</span><span
lang=EN-US style='color:#880000'>GetString</span><span lang=EN-US>(
hAnnotation, &amp;sName);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>주해에서<span lang=EN-US>
InputArray </span>변수의 이름인<span lang=EN-US> MyLookup</span>을 가져옴</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>HLSL</span>의 <span lang=EN-US
style='color:blue'>string</span><span lang=EN-US> </span>타입은<span lang=EN-US>
HLSL</span>에 영향을 주지 않고 질의<span lang=EN-US>(Query)</span>용도로 응용 프로그램에서 이용할 수 있도록
만든 자료 형입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='font-size:12.0pt'>1.2.2 </span><span style='font-size:12.0pt'>기억 장소<span
lang=EN-US>(Storage Class)</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Storage Class</span>는
변수의 수식어로 변수의 수명<span lang=EN-US>(Life Time)</span>과 접근에 대한 범위<span lang=EN-US>(Scope)</span>를
결정하며<span lang=EN-US> static, extern, uniform, shard</span>등이 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>정적 변수 <span lang=EN-US>static</span>은 <span lang=EN-US>C</span>언어의<span
lang=EN-US> static</span>과 유사하며 전역 변수에 설정이 되면 응용 프로그램에서 접근 불가능하고 <span
lang=EN-US>HLSL </span>코드 내에서만 유효 합니다<span lang=EN-US>. </span>또한 지역 변수에 설정이 되면
함수가 종료 되어도 값이 유지가 됩니다<span lang=EN-US>. </span>이것은 저 수준에서 쉐이더 내부에서 상수 레지스터를 설정할
것과 비슷합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>변수가 전역에 있고 어떤 수식어도 안 붙이면 외부 변수<span
lang=EN-US> extern</span>이 됩니다<span lang=EN-US>. extern </span>변수는 응용프로그램에서 값을 변경할
수 있습니다<span lang=EN-US>. </span>여러분이 변환 행렬<span lang=EN-US>, </span>빛의 방향<span
lang=EN-US>, </span>색상 등을 쉐이더에 전달할 경우 변수는<span lang=EN-US> extern</span>이 되어야 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>extern </span>변수는 상수 테이블을 이용해서 값을 변경합니다<span
lang=EN-US>. </span>상수 테이블은<span lang=EN-US> HLSL </span>코드를 컴파일 할 때 사용한 함수 <span
lang=EN-US>D3DXCompileShader() </span>의 인수 리스트에서 상수 테이블인 <span lang=EN-US>ID3DXConstantTable*
</span>의 주소를 얻을 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이 상수 테이블은 쉐이더의 기본 데이터 형에 대한 변수 설정 함수<span lang=EN-US>
SetVector(), SetMatrix(), SetInt(), SetFloat() </span>등이 있으며 변수를 변경하기 위해 변수 이름을
사용하는 방법과 변수 이름의 핸들을 이용한 방법<span lang=EN-US> 2</span>가지가 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>// HLSL </span>코드</p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> Dif = </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>(1,1,0,1);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>// </span>변수 이름을
이용한 방법</p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXCOLOR</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>color</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pTbl-&gt;</span><span
lang=EN-US style='color:#A000A0'>SetVector</span><span lang=EN-US>(m_pDev, </span><span
lang=EN-US style='color:fuchsia'>&quot;Dif&quot;</span><span lang=EN-US>, (</span><span
lang=EN-US style='color:blue'>D3DXVECTOR4</span><span lang=EN-US>*)&amp;color);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>핸들을 사용하면 데이터 접근 속도에 이득이 있다고 합니다<span lang=EN-US>. </span>변수의
핸들을 얻는 것은 <span lang=EN-US>GetConstantByName() </span>함수에 이름을 전달합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXHANDLE</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; m_hDif; </span><span
lang=EN-US style='color:green'>// Diffuse Constant Handle</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>핸들을 이용한 방법</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_hDif =
m_pTbl-&gt;</span><span lang=EN-US style='color:#880000'>GetConstantByName</span><span
lang=EN-US>(</span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>, </span><span lang=EN-US style='color:fuchsia'>&quot;Dif&quot;</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pTbl-&gt;</span><span
lang=EN-US style='color:#880000'>SetVector</span><span lang=EN-US>(m_pDev,
m_hDif, (</span><span lang=EN-US style='color:blue'>D3DXVECTOR4</span><span
lang=EN-US>*)&amp;color);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=213 height=159
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image002.gif"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;</span>전역 변수
설정<span lang=EN-US>: <a href="https://github.com/3dapi/bs25_shader2/raw/master/hs1_basic2_const.zip">hs1_basic2_const.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>정점 쉐이더와 픽셀 쉐이더는<span lang=EN-US> varing</span>과<span
lang=EN-US> uniform, </span>두 종류의 입력 데이터를 받습니다<span lang=EN-US>. </span>정점 쉐이더에서<span
lang=EN-US> varing </span>데이터는 정점의 위치<span lang=EN-US>, </span>법선<span
lang=EN-US>, </span>색상 등과 같이 정점 스트림에서 온 데이터입니다<span lang=EN-US>. </span>이와 대비되는<span
lang=EN-US> uniform </span>데이터는 저 수준으로 비교하면 상수 레지스터에 저장된 데이터라 할 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>만약 여러분이 정점 처리에 대한 함수를 다음과 같이 쉐이더를 작성하면 컴파일할 때 에러가 발생합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VtxPrc</span><span lang=EN-US>( </span><span lang=EN-US
style='color:blue'>in</span><span lang=EN-US>&nbsp; </span><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US> iPos: </span><span
lang=EN-US style='color:blue'>POSITION</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:blue'>out</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>oPos</span><span lang=EN-US>: </span><span
lang=EN-US style='color:blue'>POSITION</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:blue'>out</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>oD0</span><span lang=EN-US> : </span><span
lang=EN-US style='color:blue'>COLOR</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Dif&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// float4 </span><span style='color:green'>앞에<span
lang=EN-US> uniform</span>을 붙이면 에러 없어짐</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dif
= </span><span lang=EN-US style='color:blue'>float4</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>oPos</span><span lang=EN-US> = </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>(iPos, </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>oD0</span><span lang=EN-US>&nbsp; = Dif;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것은<span lang=EN-US> VtxPrc() </span>함수가 정점 처리의<span
lang=EN-US> void </span>형<span lang=EN-US> main </span>함수이기 때문에 입<span
lang=EN-US>/</span>출력을 명시적으로 지정해야하는데 <span lang=EN-US>Dif </span>변수는 입력<span
lang=EN-US>(in) </span>또는 출력<span lang=EN-US>(out)</span>으로 지정되지 않았기 때문입니다<span
lang=EN-US>. </span>그런데 <span lang=EN-US>uniform</span>을 사용해서<span lang=EN-US>
&quot;uniform float4 Dif&quot;</span>와 같이 작성하면 쉐이더 컴파일러는<span lang=EN-US> Dif </span>변수를
상수 레지스터에 저장된 데이터라 여기고 컴파일을 완성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>uniform </span>사용에서 지역 변수에는 <span
lang=EN-US>uniform </span>선언이 안되고<span lang=EN-US>, </span>전역 변수와 함수의 인수에 사용되는데<span
lang=EN-US>, D3D</span>에서 전역 변수에 대한<span lang=EN-US> uniform </span>선언은 <span
lang=EN-US>extern</span>과 거의 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>참고로<span lang=EN-US> OpenGL </span>쉐이더<span lang=EN-US> GLSL</span>의
경우 외부에서 쉐이더의 상수 값 설정을 하기위해서 전역 변수에 <span lang=EN-US>uniform</span>으로 선언하며 위치<span
lang=EN-US>, </span>색상<span lang=EN-US>, </span>법선 등의 입력 값에 대한 변수에는<span
lang=EN-US> varing</span>을 이용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=213 height=159
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image003.gif"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;Uniform </span>예<span
lang=EN-US>: <a href="https://github.com/3dapi/bs25_shader2/raw/master/hs1_basic3_uniform.zip">hs1_basic3_uniform.zip</a>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='font-size:12.0pt'>1.2.3 Semantic</span></p>

<p class=MsoNormal style='word-break:keep-all'>저 수준 쉐이더 작성에서 우리는 레지스터를 직접적으로 다루었습니다<span
lang=EN-US>. HLSL</span>에서 변수는 <span lang=EN-US>Semantic(</span>시맨틱<span
lang=EN-US>: </span>의미<span lang=EN-US>)</span>을 설정할 수 있는데<span lang=EN-US>
Semantic</span>은 변수의 입력과 출력을 확인 또는 지정하거나 데이터의 출처와 역할에 대한 분명한 의미를 부여하기 위해 함수<span
lang=EN-US>, </span>변수<span lang=EN-US>, </span>인수 뒤에 선택적으로 붙여서 서술하는 것입니다<span
lang=EN-US>. </span>종류는 <span lang=EN-US>Vertex Shader Semantic, Pixel Shader
Semantic, Explicit Register Binding (</span>명시적 레지스터 바인딩<span lang=EN-US>) </span>등이
있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>Semantic </span>설정 방법은 전역 변수<span
lang=EN-US>, </span>인수<span lang=EN-US>, </span>함수 등의 끝에 콜론<span lang=EN-US>(&quot;:&quot;)</span>을
붙이고 <span lang=EN-US>&quot;SEMANTIC </span>이름<span lang=EN-US>&quot;</span>을 붙입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4x4</span><span lang=EN-US> m_mtWldViw : </span><span
lang=EN-US style='color:blue'>WORLDVIEW</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> pos: </span><span lang=EN-US
style='color:blue'>POSITION</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Semantic</span>은
다음과 같이 함수의 입력 변수 또는 함수의 끝에 붙일 수 있습니다<span lang=FR>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>MyFunc</span><span lang=EN-US>( </span><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US> pos: </span><span lang=EN-US
style='color:blue'>POSITION</span><span lang=EN-US>) : </span><span lang=EN-US
style='color:blue'>POSITION</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>(pos, </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>만약 이 함수가 시작 함수로 설정이 되면 입력 변수에 설정된<span
lang=FR> Semantic</span>은 저 수준의<span lang=FR> &quot;dcl&quot; </span>선언과 같아져 앞의<span
lang=FR> &quot;pos&quot; </span>변수는<span lang=FR> &quot;dcl_position v0&quot;</span>와
비슷한 의미가 됩니다<span lang=FR>. </span>또한 함수의 뒤에 붙은<span lang=FR> Semantic</span>은 결과를<span
lang=FR> oPos</span>에 복사하는 것과 같은 의미가 됩니다<span lang=FR>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>구조체 변수 다음에도<span lang=FR>
Semantic</span>을 붙일 수 있습니다<span lang=FR>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR style='color:blue'>struct</span><span
lang=FR> </span><span lang=FR style='color:blue'>T</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;&nbsp;&nbsp;
</span><span lang=FR style='color:blue'>float3</span><span lang=FR> pos : </span><span
lang=FR style='color:blue'>POSITION</span><span lang=FR>;</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR><img border=0
width=213 height=158 src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image004.gif"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&lt;Semantic: <a
href="https://github.com/3dapi/bs25_shader2/raw/master/hs1_basic4_semantic.zip">hs1_basic4_semantic.zip</a>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>이렇게 구조체 변수에<span lang=EN-US>
Semantic</span>을 부여하고 함수의 입력 변수의 타입과<span lang=EN-US>, </span>출력의 타입으로 설정하면 프로그램하기가
무척 편리합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>저 수준 쉐이더의 <span lang=EN-US>&quot;dcl&quot;</span>과
대응되는 입력에 대한<span lang=EN-US> Semantic</span>은 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>POSITION[n]: </span>정점의 위치<span lang=EN-US>.
POSITION, POSITION0, POSITION1, ….</span></p>

<p class=MsoNormal><span lang=EN-US>BLENDWEIGHT[n]: </span>정점 블렌딩 비중 값</p>

<p class=MsoNormal><span lang=EN-US>BLENDINDICES[n]: </span>정점 블렌딩 인덱스 값</p>

<p class=MsoNormal><span lang=EN-US>NORMAL[n]: </span>정점 법선 벡터</p>

<p class=MsoNormal><span lang=EN-US>PSIZE[n]: Point Size</span></p>

<p class=MsoNormal><span lang=EN-US>COLOR[n]: </span>정점<span lang=EN-US>
Diffuse(COLOR, COLOR0), Specular(COLOR1)</span></p>

<p class=MsoNormal><span lang=EN-US>TEXCOORD[n]: </span>텍스처 좌표</p>

<p class=MsoNormal><span lang=EN-US>TANGENT[n]: </span>정점 접선 벡터</p>

<p class=MsoNormal><span lang=EN-US>BINORMAL[n]: </span>정점 종법선 벡터</p>

<p class=MsoNormal><span lang=EN-US>TESSFACTOR[n]: tessellation factor</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>정점 쉐이더의 출력 레지스터 지정하는 저 수준 명령어<span lang=EN-US> oXXX</span>와 대응되는
정점 쉐이더 출력<span lang=EN-US> Semantic</span>은 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>POSITION: </span>정점의 출력 위치 → <span
lang=EN-US>oPos</span></p>

<p class=MsoNormal><span lang=EN-US>PSIZE: Point Size </span>→ <span
lang=EN-US>oPts</span></p>

<p class=MsoNormal><span lang=EN-US>FOG: </span>정점 포그 값 → <span lang=EN-US>oFog</span></p>

<p class=MsoNormal><span lang=EN-US>COLOR[0,1]: Diffuse, Specular </span>→ <span
lang=EN-US>oD0, oD1</span></p>

<p class=MsoNormal><span lang=EN-US>TEXCOORD[0~7]: </span>텍스처 좌표 → <span
lang=EN-US>oT0~T7</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>D3D</span>에서 사용자가 만든 데이터는 출력 레지스터가 없기 때문에 이
데이터를 픽셀 쉐이더로 전달하기 위한 경우<span lang=EN-US> TEXCOORD </span>출력 시멘틱을 가장 많이 사용하며<span
lang=EN-US> TEXCOORD0, TEXCOORD1</span>은 대부분 사용하기 때문에 보통<span lang=EN-US>
TEXCOORD7</span>부터<span lang=EN-US> TEXCOORD6, TEXCOORD5, … </span>등을 이용합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>다음은 정점 쉐이더 <span lang=EN-US>Semantic</span>을
구조체에 적용해서 사용한 예 입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>정점 입력에 대한 구조체</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>SvtxIn</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> Nor : </span><span
lang=EN-US style='color:blue'>NORMAL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Dif : </span><span
lang=EN-US style='color:blue'>COLOR</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US> Tex : </span><span
lang=EN-US style='color:blue'>TEXCOORD</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>정점 출력에 대한 구조체</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>SvtxOut</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Dif : </span><span
lang=EN-US style='color:blue'>COLOR</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US> Tex : </span><span
lang=EN-US style='color:blue'>TEXCOORD0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Nor : </span><span
lang=EN-US style='color:blue'>TEXCOORD7</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 벡터는 출력 레지스터가
없으므로<span lang=EN-US> TEXCOORD </span>이용</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>SvtxOut</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VtxPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>SvtxIn</span><span lang=EN-US> pVtx)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>SvtxOut</span><span lang=EN-US> Out=(</span><span
lang=EN-US style='color:blue'>SvtxOut</span><span lang=EN-US>)</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>쉐이더 연산</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=213 height=158 src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image005.gif"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;Struct: <a
href="https://github.com/3dapi/bs25_shader2/raw/master/hs1_basic5_struct.zip">hs1_basic5_struct.zip</a>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>픽셀 쉐이더의<span lang=EN-US>
Semantic </span>문법은 정점 쉐이더<span lang=EN-US> Semantic</span>과 동일하게 데이터의 출처에 대한 식별을
위해 사용되며 시멘틱 위치는 구조체 멤버 뒤<span lang=EN-US>, </span>함수의 인수 뒤<span lang=EN-US>, </span>함수
뒤 등에 붙여서 사용합니다<span lang=EN-US>. </span>이 픽셀 쉐이더<span lang=EN-US> Semantic</span>은
<span lang=EN-US>Pixel Shader Input Semantic</span>과<span lang=EN-US> Pixel
Shader Output Semantic </span>두 종류가 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>픽셀 쉐이더 입력 <span lang=EN-US>Semantic</span>은
픽셀 쉐이더의 입력 레지스터 지정하고 <span lang=EN-US>Sampler </span>객체는 따로 지정해서 사용합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>픽셀 쉐이더 입력<span lang=EN-US>
Semantic</span>은<span lang=EN-US> COLOR, TEXCOORD </span>두 종류가 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>COLOR, COLOR[0,
1]: </span>정점 처리 과정에서 만들어진<span lang=EN-US> Diffuse(0)</span>와 <span
lang=EN-US>Specular(1)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>TEXCOORD, TEXCOORD[0~7]:
</span>텍스처 좌표</p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>픽셀 쉐이더 출력 <span lang=EN-US>Semantic</span>은
픽셀 쉐이더의 출력 레지스터 지정하는 것으로 저 수준 명령어의 <span lang=EN-US>oXXXX</span>와 대응됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>COLOR[n] </span>색상
→<span lang=EN-US> oC[n], COLOR =</span><span lang=EN-US style='color:blue'>COLOR0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>TEXCOORD[n]: </span>→
텍스처 좌표</p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>DEPTH[n]: </span>→
<span lang=EN-US>oDepth[n], DEPTH = DEPTH0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Explicit
Register Binding</span>은 레지스터 이름을 명시적으로 지정하는 것으로 저 수준과 혼용해 사용하거나 아니면 고정 기능 파이프라인의
렌더링 상태 머신에 설정된 값을 이용하고자 할 때 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>명시적 레지스터 바인딩은 다음과 같이 <span
lang=EN-US>Register </span>키워드와 저 수준 레지스터 이름을 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>타입<span lang=EN-US> + </span>변수<span
lang=EN-US> + </span><span lang=EN-US style='color:fuchsia'>&quot;:&quot;</span><span
lang=EN-US> + </span><span lang=EN-US style='color:blue'>register</span><span
lang=EN-US>( </span><span lang=EN-US style='color:fuchsia'>&quot;</span><span
style='color:fuchsia'>저 수준 레지스터 이름<span lang=EN-US>&quot;</span></span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>예를 들어 고정기능 파이프라인의 다중 처리<span
lang=EN-US>(Multi-Texturing)</span>의 샘플러<span lang=EN-US> 0</span>번에 대해서 쉐이더 코드를
다음과 같이 작성할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> SmpDif : </span><span
lang=EN-US style='color:#880000'>register</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>s0</span><span lang=EN-US>);&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Sampler </span><span style='color:green'>객체<span
lang=EN-US> SmpDif</span>를<span lang=EN-US> register s0</span>에 바인딩</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 되면 디바이스의<span lang=EN-US> SetTexture(0, pTex); </span>에 바인딩된<span
lang=EN-US> pTex </span>텍스처를 쉐이더에서 사용할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>때로는 상수 레지스터를 설정할 수도 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4x4</span><span lang=EN-US> mtWorld : </span><span
lang=EN-US style='color:#880000'>register</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>c0</span><span lang=EN-US>);&nbsp; &nbsp;</span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>전역 변수<span
lang=EN-US> mtWorld</span>를 상수 레지스터<span lang=EN-US> c0</span>에 바인딩</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US>&nbsp;&nbsp; vcLight : </span><span
lang=EN-US style='color:#880000'>register</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>c10</span><span lang=EN-US>);&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>전역 변수<span
lang=EN-US> vcLight</span>를 상수 레지스터<span lang=EN-US> c10</span>에 바인딩</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>상수 테이블을 통해서 전역 변수 값을 설정하지만 이와 같이
레지스터를 명시적으로 바인딩하면 상수 테이블 대신 디바이스의<span lang=EN-US> SetVertexShaderConstantF() </span>함수로<span
lang=EN-US> c0, c10 </span>레지스터 값을 변경할 수 있게 되어 결과적으로<span lang=EN-US> mtWorld,
vcLight</span>를 수정한 것과 동일한 효과를 발휘합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='font-size:12.0pt'>1.2.3 </span><span style='font-size:12.0pt'>사용자 정의 함수</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>HLSL</span>의 함수는<span
lang=EN-US> C</span>언어의 함수와 거의 같으며 기본적인 형태는 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&quot;</span><span
lang=EN-US style='color:blue'>return type</span><span lang=EN-US>&quot; &quot;</span><span
lang=EN-US style='color:#880000'>Function_Name</span><span lang=EN-US>&quot;({&quot;</span><span
lang=EN-US style='color:blue'>argument type</span><span lang=EN-US>&quot;
&quot;argument name&quot;}) { : </span><span lang=EN-US style='color:blue'>Sementic</span><span
lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// function body</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> …;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>만약 함수가 정점 처리 또는 픽셀 처리의<span
lang=EN-US> main </span>함수 경우에는 함수의 반환 형은 정점 쉐이더<span lang=EN-US>/</span>픽셀 쉐이더<span
lang=EN-US> Semantic</span>을 따라야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>픽셀 쉐이더<span lang=EN-US> main </span>함수 예<span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> PxlPrc(</span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US> vTex : </span><span
lang=EN-US style='color:blue'>TEXCOORD0</span><span lang=EN-US>) : </span><span
lang=EN-US style='color:blue'>COLOR0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US>
tex2D(DiffuseSampler, vTex);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>또한 함수의 반환 형이<span lang=EN-US>
void </span>형이면 함수의 인수 형 앞에<span lang=EN-US> in/out </span>키워드를 넣어서 입<span
lang=EN-US>/</span>출력을 지정할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>정점 쉐이더<span lang=EN-US> main </span>함수
예<span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VtxPrc</span><span lang=EN-US>( </span><span lang=EN-US
style='color:blue'>in</span><span lang=EN-US>&nbsp; </span><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> vPos : </span><span
lang=EN-US style='color:blue'>POSITION</span><span lang=EN-US>, &nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>입력 레지스터 위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>in</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US> vTex : </span><span
lang=EN-US style='color:blue'>TEXCOORD0</span><span lang=EN-US>, &nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>입력 레지스터 텍스처 좌표<span
lang=EN-US> 0</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>out</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> oPos : </span><span
lang=EN-US style='color:blue'>POSITION</span><span lang=EN-US>, &nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 레지스터 위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:blue'>out</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US> oTex : </span><span
lang=EN-US style='color:blue'>TEXCOORD0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 레지스터 텍스처 좌표<span
lang=EN-US> 0</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )
</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; …</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=213 height=158 src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image005.gif"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;</span>함수 사용<span
lang=EN-US>: <a href="https://github.com/3dapi/bs25_shader2/raw/master/hs1_basic6_function.zip">hs1_basic6_function.zip</a>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>함수의 인수 값 변동이 쉐이더 내부에서 불허할 경우 <span
lang=EN-US style='color:blue'>uniform</span><span lang=EN-US> </span>키워드 이용합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='font-size:12.0pt'>1.2.4 HLSL </span><span style='font-size:12.0pt'>내장 함수<span
lang=EN-US>, </span>기타</span></p>

<p class=MsoNormal style='word-break:keep-all'>여러분이 <span lang=EN-US>HLSL </span>내장
함수를 적절히 사용하려면 쉐이더 버전이<span lang=EN-US> 2.0</span>이상으로 컴파일 하는 것이 좋습니다<span
lang=EN-US>. </span>대부분 쉐이더의 함수는 정점 처리의 변환과 조명 효과 그리고 픽셀 처리에 관련된 함수로 수학 함수와 샘플링
함수가 <span lang=EN-US>90% </span>이상입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Math </span>함수<span lang=EN-US>:</span></p>

<p class=MsoNormal><span lang=EN-US>- </span>삼각 함수<span lang=EN-US>: sin, cos,
tan, acos, asin, cot</span></p>

<p class=MsoNormal><span lang=EN-US>- </span>지수 함수<span lang=EN-US>: exp: </span>자연대수<span
lang=EN-US> e</span>의 승수<span lang=EN-US>, exp2(): 2</span>의 승수<span
lang=EN-US>, pow(x,y)=x^y</span></p>

<p class=MsoNormal><span lang=EN-US>- </span>로그 함수<span lang=EN-US>: log, log2,
log10</span></p>

<p class=MsoNormal><span lang=EN-US>- </span>벡터 함수<span lang=EN-US>: dot(),
cross(), distance(), length(), len(), sqrt(), rsqrt(),</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; normalize(),
reflect(), refract()</span></p>

<p class=MsoNormal><span lang=EN-US>- </span>행렬 함수<span lang=EN-US>:
determinant(), transpose()</span></p>

<p class=MsoNormal><span lang=EN-US>- </span>산술 함수<span lang=EN-US>: abs(),
ceil(), floor(), round(), fmod(), lerp(), saturate()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>샘플링 함수<span lang=EN-US>:</span></p>

<p class=MsoNormal><span lang=EN-US>- tex{n}D(s,t): n</span>차원 샘플러<span
lang=EN-US> s</span>로<span lang=EN-US> t </span>좌표에 대한 색상 추출<span lang=EN-US>. tex1D,
tex2D, texCUBE(s,t)</span></p>

<p class=MsoNormal><span lang=EN-US>- tex{n}Dproj(s,t): </span>정점의 깊이<span
lang=EN-US>(z,w)</span>를 저장한 텍스처에 대한<span lang=EN-US> n</span>차원 투영 샘플링<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t=
4D</span>임에 주의 샘플링 전에<span lang=EN-US> t</span>는<span lang=EN-US> t.w</span>로 나누어짐</p>

<p class=MsoNormal><span lang=EN-US>- tex{n}Dbias(s,t): </span>보정된<span
lang=EN-US> n</span>차원 텍스처에 대한<span lang=EN-US> Sampliing</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>HLSL</span>의<span lang=EN-US> Keyword </span>중에<span
lang=EN-US> Technique</span>이 있습니다<span lang=EN-US>. </span>이것은 정점 쉐이더와 픽셀 쉐이더를
통합한 <span lang=EN-US>ID3DXEffect </span>객체를 사용할 때 이용되는 키워드로 렌더링의 단위인<span
lang=EN-US> pass</span>와 <span lang=EN-US>pass </span>안에 렌더링 상태 머신의 옵션 지정<span
lang=EN-US>, </span>정점 쉐이더<span lang=EN-US>, </span>픽셀 쉐이더 객체의 컴파일 방법 등을 지정할 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=FR style='color:blue'>technique</span><span
lang=FR> T</span></p>

<p class=MsoNormal><span lang=FR>{</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:blue'>pass</span><span lang=FR> P0</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:blue'>FogEnable</span><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
</span><span lang=FR style='color:#A000A0'>FALSE</span><span lang=FR>;</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>AlphablendEnable</span><span lang=EN-US>= </span><span
lang=EN-US style='color:#A000A0'>FALSE</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VertexShader</span><span lang=EN-US> = </span><span
lang=EN-US style='color:blue'>compile vs_2_0</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>VtxPrc</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>PixelShader </span><span lang=EN-US>= </span><span
lang=EN-US style='color:blue'>compile ps_2_0</span><span lang=EN-US> </span><span
lang=EN-US style='color:#880000'>PxlPrc</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>pass</span><span lang=EN-US> P1</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='font-size:14.0pt'>1.3 </span><span style='font-size:14.0pt'>정점 처리<span
lang=EN-US> HLSL</span></span></p>

<p class=MsoNormal style='word-break:keep-all'>지금까지<span lang=EN-US> HLSL</span>의
중요한 문법들을 살펴보았습니다<span lang=EN-US>. </span>이제 정점 처리과정부터 픽셀 처리 과정을 간단한 연습을 통해서<span
lang=EN-US> HLSL</span>을 익혀보도록 합시다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='font-size:12.0pt'>1.3.1 </span><span style='font-size:12.0pt'>정점 변환<span
lang=EN-US>, </span>텍스처</span></p>

<p class=MsoNormal style='word-break:keep-all'>쉐이더 기초 강의 때부터 계속 이야기 했듯이<span
lang=EN-US> HLSL</span>의 정점 처리 적용 범위는 변환과 조명입니다<span lang=EN-US>. </span>변환을 수식으로
표현하면<span lang=EN-US> &quot;</span>행렬<span lang=EN-US> * </span>벡터<span
lang=EN-US>&quot; </span>또는<span lang=EN-US> &quot;</span>벡터<span lang=EN-US> *
</span>행렬<span lang=EN-US>&quot;</span>입니다<span lang=EN-US>. HLSL</span>은<span
lang=EN-US> d3d</span>와 일치하도록 쉐이더가 구성되어 있어서<span lang=EN-US> &quot;</span>벡터<span
lang=EN-US> * </span>행렬<span lang=EN-US>&quot; </span>식을 사용합니다<span lang=EN-US>.
</span>이들 곱셈은 내장 함수<span lang=EN-US> &quot;mul&quot;</span>을 이용합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>쉐이더에 입력되는 정점의 위치는 특별한 경우가 아니면 대부분<span
lang=EN-US> float3 </span>형입니다<span lang=EN-US>. </span>그런데 파이프라인은<span
lang=EN-US> float4 </span>형을 사용하므로 입력 데이터를<span lang=EN-US> float4 </span>형으로 늘리고
마지막<span lang=EN-US> w=1</span>로 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>이렇게 해서 월드 변환<span lang=EN-US>, </span>뷰
변환<span lang=EN-US>, </span>정규 변환의 연산을<span lang=EN-US> mul() </span>함수를 통해서 진행합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>만약 뷰 변화<span lang=EN-US>, </span>정규
변환에 대해서 특별하게 처리할 내용이 없다면 외부에서 뷰 행렬과 투영 행렬을 미리 곱한다음 쉐이더에 적용하는 것이 일반적입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4x4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_mtWld;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>월드 변환 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4x4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_mtViwPrj;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>뷰<span
lang=EN-US> * </span>투영 변환 행렬</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vcInput;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 데이터의 입력 위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vcOut;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>변환된 출력 위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>vcOut&nbsp;&nbsp; =
</span><span lang=EN-US style='color:blue'>float4</span><span lang=EN-US>(vcIn,</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// float4</span><span style='color:green'>형으로 늘리고<span
lang=EN-US> w=1</span>로 설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>vcOut&nbsp;&nbsp; =
</span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(vcOut,
m_mtWld); </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>월드 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>vcOut&nbsp;&nbsp; =
</span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(vcOut,
m_mtViwPrj); </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>뷰<span lang=EN-US> * </span>투영 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>return</span><span lang=EN-US> vcOut</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=213 height=158 src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image006.gif"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;</span>정점 변환<span
lang=EN-US> 1: <a href="https://github.com/3dapi/bs25_shader2/raw/master/hs2_vtx1_transform1.zip">hs2_vtx1_transform1.zip</a>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>여러분은 앞으로 월드 변환<span lang=EN-US>,
</span>뷰 변환<span lang=EN-US>, </span>투영 변환에 대해서<span lang=EN-US> HLSL</span>로 작성할
일이 많을 것입니다<span lang=EN-US>. </span>이들을 각각 처리해 보는 것도 아주 중요합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4x4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mtWorld;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>월드 변환 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4x4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mtView;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>뷰 변환 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4x4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mtProj;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정규 변환 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'>…</p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vcInput;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 데이터의 입력 위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vcOut;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>변환된 출력 위치</span></p>

<p class=MsoNormal style='word-break:keep-all'>…</p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>vcOut = </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>(vcInput, </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>vcOut = </span><span
lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(vcOut, mtWorld);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>vcOut = </span><span
lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(vcOut, mtView);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>vcOut = </span><span
lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(vcOut, mtProj);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>return</span><span lang=EN-US> vcOut;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=213 height=158 src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image007.gif"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;</span>정점 변환<span
lang=EN-US>2: <a href="https://github.com/3dapi/bs25_shader2/raw/master/hs2_vtx1_transform2.zip">hs2_vtx1_transform2.zip</a>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>정점 처리에 대한 쉐이더 함수를 작성할 때 색상<span
lang=EN-US>, </span>텍스처 좌표 등도 작성해야 합니다<span lang=EN-US>. </span>보통 텍스처의 좌표는 그림자<span
lang=EN-US>, </span>환경 매핑 등과 같이 어느 특정한 대상에 대한 변환을 제외한다면 있는 그대로 출력하는 것이 대부분이며 이 경우에
대한 출력 구조체는 간단하게 만들 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> SvsOut</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION</span><span lang=EN-US>&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Dif : </span><span
lang=EN-US style='color:blue'>COLOR0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력<span
lang=EN-US> Diffuse</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US> Tx0 : </span><span
lang=EN-US style='color:blue'>TEXCOORD0</span><span lang=EN-US> ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 텍스처 좌표</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>SvsOut VtxPrc( </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>입력 위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Dif : </span><span
lang=EN-US style='color:blue'>COLOR0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>입력<span
lang=EN-US> Diffuse</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Tx0 : </span><span
lang=EN-US style='color:blue'>TEXCOORD0</span><span lang=EN-US> </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>입력 텍스처 좌표</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SvsOut
Out = (SvsOut)</span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Dif =
Dif;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Tx0 =
Tx0;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=213 height=158 src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image008.gif">&nbsp;<img border=0
width=213 height=158 src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image009.gif"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;</span>텍스처 좌표와
정점<span lang=EN-US> Diffuse </span>출력<span lang=EN-US>: <a
href="https://github.com/3dapi/bs25_shader2/raw/master/hs2_vtx2_tex.zip">hs2_vtx2_tex.zip</a>, <a href="https://github.com/3dapi/bs25_shader2/raw/master/hs2_vtx2_tex_earth.zip">hs2_vtx2_tex_earth.zip</a>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='font-size:12.0pt'>1.3.2 </span><span style='font-size:12.0pt'>색상<span
lang=EN-US>, </span>안개</span></p>

<p class=MsoNormal style='word-break:keep-all'>정점의 위치 이외에 색상<span lang=EN-US>, </span>텍스처
좌표<span lang=EN-US>, </span>안개 효과 등을 하나의 함수에서 출력하기 위해서 구조체 사용이 필요합니다<span
lang=EN-US>. </span>간단하게 정점의 색상을 출력하기 위한 구조체와 함수는 다음과 같이 작성할 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> SvsOut</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION</span><span lang=EN-US>; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Dif : </span><span
lang=EN-US style='color:blue'>COLOR0</span><span lang=EN-US>;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력<span
lang=EN-US> Diffuse</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>SvsOut</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VtxProc</span><span lang=EN-US>( </span><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Dif : </span><span
lang=EN-US style='color:blue'>COLOR</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SvsOut
Out = (SvsOut)</span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 변환</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>…</p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>색상 출력</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Dif
= Dif;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>정점의 색상을 출력할 때 주의할 것은 색상에 대한 입력값이<span
lang=EN-US> float4 </span>형입니다<span lang=EN-US>. </span>보통<span lang=EN-US> D3D</span>는
색상을<span lang=EN-US> 32</span>비트로 취급하지만 쉐이더는<span lang=EN-US> r, g, b, a</span>에
대해서<span lang=EN-US> float</span>형으로 처리하기 때문에<span lang=EN-US> float4</span>형으로
선언해야 합니다<span lang=EN-US>. </span>색상 처리를<span lang=EN-US> float</span>형으로 정의하고 색상의
범위를<span lang=EN-US> [0, 1]</span>로 정하면 색상의 가산연산에 대해서는 덧셈을<span lang=EN-US>, </span>감산
연산은 곱셈을 적용할 수가 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=212 height=159 src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image010.gif"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;</span>정점<span
lang=EN-US> Diffuse </span>출력<span lang=EN-US>: <a href="https://github.com/3dapi/bs25_shader2/raw/master/hs2_vtx3_diffuse.zip">hs2_vtx3_diffuse.zip</a>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>우리는 이전에 저 수준 정점 쉐이더에서 선형 포그<span
lang=EN-US>(Linear Fog)</span>를 직접 계산해서 레지스터<span lang=EN-US> oFog</span>에 복사하지않고
정점의 색상 출력<span lang=EN-US> oD0</span>에 출력해 보았습니다<span lang=EN-US>. </span>코드의 가독성을
위해서 전처리문을 이용해 레지스터의 이름을 우리가 생각한 이름으로 만들었지만 여전히 저 수준 명령문은 익숙해지기가 어렵습니다<span
lang=EN-US>. HLSL</span>을 사용하면 여러분은 선형 포그<span lang=EN-US>, </span>지수 포그<span
lang=EN-US>, </span>높이 포그 등을 쉽게 구현할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>선형 변화에 대한 안개 효과에 대한 공식을 출력 색상으로 지정하는
방법은 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i><span lang=EN-US>Fog Factor = </span>뷰 변환 후 정점의<span
lang=EN-US> z </span>값<span lang=EN-US>/(</span>포그 끝 값 &#8211; 포그 시작 값<span
lang=EN-US>)</span></i></p>

<p class=MsoNormal><i>출력<span lang=EN-US> Diffuse </span>색상<span lang=EN-US> =
Fog </span>색상<span lang=EN-US> * Fog Factor + </span>정점 <span lang=EN-US>Diffuse
* (1 - Fog Factor)</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 공식들을 쉐이더로 바꾸는 일은 그리 큰 어려움은 없습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>안개 효과 변수</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US>&nbsp; m_FogColor;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Fog </span><span style='color:green'>색상</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; m_FogEnd;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Fog </span><span style='color:green'>끝 값</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; m_FogBgn;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Fog </span><span style='color:green'>시작 값</span></p>

<p class=MsoNormal style='word-break:keep-all'>…</p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>SvsOut</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>VtxProc</span><span lang=EN-US>( </span><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Dif : COLOR)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'>…</p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float</span><span lang=EN-US> FogFactor;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점의 변환<span
lang=EN-US>: </span>월드<span lang=EN-US>, </span>뷰</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vcOut
= </span><span lang=EN-US style='color:blue'>float4</span><span lang=EN-US>(vcInput,
</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vcOut
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(vcOut,
m_mtWorld);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vcOut
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(vcOut,
m_mtView);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점의 뷰 변환 과정의<span
lang=EN-US> z/(Fog </span>끝 값<span lang=EN-US> - Fog </span>시작 값<span
lang=EN-US>)</span>을 <span lang=EN-US>Fog Factor</span>로 저장</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FogFactor
= vcOut.z/(m_FogEnd - m_FogBgn);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점의 정규 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vcOut
= </span><span lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(vcOut,
m_mtProj);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력<span
lang=EN-US> Diffuse</span>를 정점<span lang=EN-US> Diffuse</span>와 포그 색상과 혼합</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Fog = m_FogColor *
FogFactor + In.Dif * (</span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>-FogFactor);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>혼합 값을 출력 색상으로
지정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.Dif
= Fog;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=FR>&nbsp;</span></p>

<p class=MsoNormal><span lang=FR><img border=0 width=212 height=158
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image011.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>안계 효과<span lang=EN-US>: <a
href="https://github.com/3dapi/bs25_shader2/raw/master/hs2_vtx3_fog.zip">hs2_vtx3_fog.zip</a>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>앞의<span lang=EN-US> Fog Factor</span>는
선형적으로 안개가 변화되기 때문에<span lang=EN-US> Linear Fog </span>입니다<span lang=EN-US>. </span>쉐이더의
내장 함수<span lang=EN-US> exp() </span>함수와<span lang=EN-US> pow()</span>를 사용해서 <span
lang=EN-US>D3DFOG_EXP, _EXP2</span>를 만들 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i><span lang=EN-US>Fog Factor EXP = 1/exp(</span>뷰 변환 후 정점의<span
lang=EN-US> z </span>값<span lang=EN-US> * Fog Density)</span></i></p>

<p class=MsoNormal><i><span lang=EN-US>Fog Factor EXP2 = 1/exp( pow(</span>뷰 변환
후 정점의<span lang=EN-US> z </span>값<span lang=EN-US> * Fog Density, 2) )</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>지금은 정점의<span lang=EN-US> Diffuse </span>색상에 안개 효과를 적용하고 있어서 텍스처가
적용되면 제대로 표현하지 못합니다<span lang=EN-US>. </span>따라서 제대로된 안개 표현은 픽셀 쉐이더에서 처리하는 것이 가장
좋은 방법이며 쉐이더<span lang=EN-US> Effect</span>에서 구현해 보도록 하겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='font-size:12.0pt'>1.3.3 </span><span style='font-size:12.0pt'>분산 조명</span></p>

<p class=MsoNormal>저 수준보다<span lang=EN-US> HLSL</span>을 이용하는 장점 중에 하나가 내장된 수학 함수들이
많고 이들을 적절하게 이용할 수 있다는 것입니다<span lang=EN-US>. </span>여러분이 램버트 확산 또는 퐁의 반사의 세기<span
lang=EN-US>(Intensity)</span>를 구하기 위해서 저 수준으로 작성하게 되면 매번 모든 처리 과정을 작성해야 했습니다<span
lang=EN-US>. </span>물론 쉐이더 코드의 길이가 적어서<span lang=EN-US> copy paste</span>가 익숙해지면
별로 문제될 것이 없다고 생각하는 분들도 있지만 같은 내용이면<span lang=EN-US> D3D</span>에서 지원되는 것을 사용하라고 대부분<span
lang=EN-US> GPU</span>를 만드는 회사들이 권장하고 있는데 우리는<span lang=EN-US> D3D</span>의 쉐이더가
지원하는 함수를 이용해서 분산 조명<span lang=EN-US>(</span>램버트 확산<span lang=EN-US>) </span>효과와
스페큘러<span lang=EN-US>(</span>퐁 반사<span lang=EN-US>) </span>효과를 구현해 보겠습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>분산 조명은 램버트 확산에 기초를 두고 있으며 반사되는 빛의 세기<span lang=EN-US>(Intensity)</span>를
빛의 방향과 정점의 법선 벡터와의 내적을 통해서 구합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>반사 밝기<span lang=EN-US> = Dot(N, L)</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 공식을 그대로 적용하게 되면 최종 색상의 범위는<span lang=EN-US> -1.0 ~ +1.0 </span>가
됩니다<span lang=EN-US>. </span>간단하게 음수 값을 제거하기 위해서 <span lang=EN-US>saturation</span>을
적용할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>반사 밝기<span lang=EN-US> = saturate( Dot(N, L) )</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 공식은<span lang=EN-US> HLSL</span>의<span lang=EN-US> dot(),
saturate()</span>함수를 사용해서 거의 그대로 바꿀 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>float3</span><span
lang=EN-US>&nbsp; m_vcLgt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // </span>빛의 방향 벡터</p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>VtxProc</span><span
lang=EN-US>(…)</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US>&nbsp; vcNor;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
</span>정점의 법선 벡터</p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; …</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>&nbsp; ReflectIntensity
= </span><span lang=EN-US style='color:#880000'>saturate</span><span
lang=EN-US>( </span><span lang=EN-US style='color:#880000'>dot</span><span
lang=EN-US>(vcNor, m_vcLgt) );</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>만약 렌더링 오브젝트가 회전 변환을 한다면 정점의 법선 벡터는 내적을 구하는 <span lang=EN-US>dot()
</span>함수에 적용되기 전에 회전 변환해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>float3x3</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_mtRot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
</span>회전 행렬</p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>vcNor = </span><span lang=EN-US
style='color:#880000'>mul</span><span lang=EN-US>(vcNor, m_mtRot);</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>saturate()</span>함수로<span lang=EN-US> [0,1]
</span>범위 값만 갖게 하는 것이 가장 간단하지만 현실 세계에서 빛은 공기 때문에 산란이 생기고 이로 인해서 <span
lang=EN-US>90</span>가 넘어도 약간의 반사가 있습니다<span lang=EN-US>. </span>이것을 물리적으로 구현하는 것이
가장 좋지만 다음과 같이 간단하게 처리할 수도 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>반사 밝기<span lang=EN-US> = (Dot(N, L) + 1) /2</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 공식에 의해서 반사의 세기는 이전과 동일하게<span lang=EN-US> [0, 1] </span>범위를
갖지만 법선 벡터와 빛의 방향 벡터의 각도가 <span lang=EN-US>90</span>가 넘어도 반사 효과가 만들어 집니다<span
lang=EN-US>. </span>이 공식을 일반화 시키면 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>반사 밝기<span lang=EN-US> = saturate ( a * Dot(N, L) + b )</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것을<span lang=EN-US> HLSL</span>로 바꾸는 것은 어렵지 않습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>static</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; m_Sat_A = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>5f</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Saturation Flag A</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>static</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US>&nbsp;&nbsp; m_Sat_B = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>5f</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Saturation Flag B</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US>&nbsp; m_vcLgt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>빛의 방향 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'>…</p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>VtxProc</span><span lang=EN-US>(</span>…<span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US>&nbsp; vcNor =
In.Nor;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점의 법선 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'>…</p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>&nbsp; ReflectIntensity
= </span><span lang=EN-US style='color:#880000'>saturate</span><span
lang=EN-US>(m_Sat_A * </span><span lang=EN-US style='color:#880000'>dot</span><span
lang=EN-US>(vcNor, m_vcLgt) + m_Sat_B);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>외부에서<span lang=EN-US> Saturation </span>변수의 값을 바꾸고 싶으면<span
lang=EN-US> static </span>키워드를 해제하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image012.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Lambert: <a
href="https://github.com/3dapi/bs25_shader2/raw/master/hs2_vtx4_lgt_diffuse.zip">hs2_vtx4_lgt_diffuse.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='font-size:12.0pt'>1.3.4 </span><span style='font-size:12.0pt'>스페큘러 조명</span></p>

<p class=MsoNormal>퐁 반사를 사용한 스페큘러 반사 세기는 정점의 법선 벡터<span lang=EN-US>(N)</span>에 의해
반사되는 광원의 반사 벡터<span lang=EN-US>(R), </span>정점에서 바라보는 카메라에 대한 시선 벡터<span
lang=EN-US>(E)</span>의 내적의 결과에 하이라이트<span lang=EN-US>(Sharpness) </span>세기를 멱승<span
lang=EN-US>(Power)</span>으로 구합니다<span lang=EN-US>. </span>여러분은 먼저 반사 벡터<span
lang=EN-US>(R: Reflection vector)</span>를 정점의 법선 벡터<span lang=EN-US>(N)</span>와
빛의 방향 벡터<span lang=EN-US>(L)</span>을 사용해서 먼저 구하고 반사의 세기를 결정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i><span lang=EN-US>R = 2 * dot(N, L) * N &#8211; L</span></i></p>

<p class=MsoNormal><i>퐁 반사 밝기<span lang=EN-US> = power(Dot(R, E), Sharpness)</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>반사 벡터를 구해주는 내장 함수는<span lang=EN-US> reflect()</span>함수 이며<span
lang=EN-US>, </span>이 함수를 사용할 때는 빛의 방향을 반대 방향으로 설정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><i><span lang=EN-US>&nbsp;</span></i></p>

<p class=MsoNormal><i><span lang=EN-US>reflect(L, N) = L - 2 * dot(L, N) * N</span></i></p>

<p class=MsoNormal><i>반사 벡터 <span lang=EN-US>R = reflect(-L, N)</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>멱승<span lang=EN-US>(Power)</span>을 구하는 <span lang=EN-US>HLSL
</span>함수는<span lang=EN-US> pow() </span>입니다<span lang=EN-US>. </span>이들 내장 함수 등을
이용해서 퐁 반사의 세기를<span lang=EN-US> HLSL</span>로 간단하게 작성할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US> m_vcLgt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>빛의 방향 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US> vcNor;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점의 법선 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US> vcEye;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점에서 카메라 위치를
바라본 시선 방향 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'>…</p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US>&nbsp; vcR = </span><span
lang=EN-US style='color:#880000'>reflect</span><span lang=EN-US>(-m_vcLgt, vcNor);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>float4</span><span
lang=EN-US>&nbsp; Phong = </span><span lang=EN-US style='color:#880000'>pow</span><span
lang=EN-US>( </span><span lang=EN-US style='color:#880000'>dot</span><span
lang=EN-US>(vcR,&nbsp; vcEye), m_fSharp);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>그런데 렌더링 오브젝트는 월드 변환이 필요하므로 반사의 세기를 구하기 전에 정점에서 카메라의 위치를 바라본 시선
방향 벡터와 반사벡터에 영향을 주는 정점의 위치와 법선 벡터를 각각 월드 변환과 회전 변환을 적용해야 하고 카메라의 위치를 외부에서 받아와서 시선
방향 벡터를 구한다음 반사의 세기를 구합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4x3</span><span lang=EN-US> m_mtWld;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>월드 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3x3</span><span lang=EN-US> m_mtRot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>회전 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US>&nbsp;  m_vcCam;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>카메라 위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float3</span><span lang=EN-US>&nbsp;  m_vcLgt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>빛의 방향 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'>…</p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>VtxProc</span><span lang=EN-US>(</span>…<span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> vcPos = </span><span
lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>(In.Pos, </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>), m_mtWld);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>위치의 월드 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> vcNor = </span><span
lang=EN-US style='color:#A000A0'>mul</span><span lang=EN-US>(In.Nor, m_mtRot);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선의 회전 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> vcEye = </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>( m_vcCam -
vcPos);&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>시선 벡터의 정규화</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> vcRfc = </span><span
lang=EN-US style='color:#880000'>reflect</span><span lang=EN-US>(-m_vcLgt, vcNor);&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>반사 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Phong = </span><span
lang=EN-US style='color:#880000'>pow</span><span lang=EN-US>( dot(vcRfc,
vcEye), m_fSharp); </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>퐁 반사 세기</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=242 height=181 src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image013.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>퐁 반사<span lang=EN-US>: <a
href="https://github.com/3dapi/bs25_shader2/raw/master/hs2_vtx4_lgt_phong.zip">hs2_vtx4_lgt_phong.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Blinn-Phong </span>반사의
세기는 퐁 반사의 반사 벡터와 시선 벡터를 사용하지 않고 <span lang=EN-US>Half </span>벡터와 정점의 법선 벡터를 이용합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i><span lang=EN-US>Half </span>벡터<span lang=EN-US> =
normalize(E + L)</span></i></p>

<p class=MsoNormal style='word-break:keep-all'><i><span lang=EN-US>Blinn-Phong </span>반사
세기<span lang=EN-US> = Dot(N, H)^Sharpness</span></i></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>VtxProc</span><span lang=EN-US>(</span>…<span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'>…</p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> vcEye = </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(m_vcCam -
vcPos);&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>시선 벡터의 정규화</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float3</span><span lang=EN-US> vcHlf = </span><span
lang=EN-US style='color:#880000'>normalize</span><span lang=EN-US>(vcEye +
m_vcLgt);&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// Half </span><span
style='color:green'>벡터</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Blinn = </span><span
lang=EN-US style='color:#880000'>pow</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#880000'>dot</span><span lang=EN-US>(vcNor, vcHlf),
m_fSharp); </span><span lang=EN-US style='color:green'>// Blinn-Phong </span><span
style='color:green'>반사 세기</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image014.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>블린<span lang=EN-US>-</span>퐁 반사<span
lang=EN-US>: <a href="https://github.com/3dapi/bs25_shader2/raw/master/hs2_vtx4_lgt_blinn.zip">hs2_vtx4_lgt_blinn.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>1.4 </span><span
style='font-size:14.0pt'>픽셀 처리<span lang=EN-US>(Pixel Processing) HLSL</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>1.4.1 </span><span
style='font-size:12.0pt'>간단한 픽셀 처리<span lang=EN-US> HLSL</span></span></p>

<p class=MsoNormal>프로그램 가능한 픽셀 파이프라인은 픽셀의 샘플링<span lang=EN-US>(Sampling)</span>과
다중 텍스처 처리<span lang=EN-US>(Multi-Texturing) </span>입니다<span lang=EN-US>. </span>픽셀
파이프라인에 입력되는 데이터는 정점 처리 과정의<span lang=EN-US> Rastering</span>을 통해서 만들어진 픽셀<span
lang=EN-US>, </span>텍스처 좌표<span lang=EN-US>, </span>그리고 텍스처입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>픽셀 처리의 결과는 색상이기 때문에<span lang=EN-US> HLSL </span>함수를 작성하면 출력은<span
lang=EN-US> float4</span>형으로 정하고<span lang=EN-US> Semantic</span>은<span
lang=EN-US> COLOLOR</span>로 합니다<span lang=EN-US>. </span>간단하게 정점 처리 과정에서 만들어진 색상을
그대로 출력하는<span lang=EN-US> HLSL </span>함수를 다음과 같이 작성할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> iDif: </span><span
lang=EN-US style='color:blue'>COLOR</span><span lang=EN-US>) : </span><span
lang=EN-US style='color:blue'>COLOR</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> iDif;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>void</span>형 함수를 사용하는 경우라면<span lang=EN-US>
in/out </span>키워드를 이용해서 다음과 같이 작성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>void</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlPrc</span><span lang=EN-US>(&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>in</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> iDif : </span><span
lang=EN-US style='color:blue'>COLOR0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// From Vertex Processing</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>out</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> oDif: </span><span
lang=EN-US style='color:blue'>COLOR0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Output oC0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oDif
= iDif;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>정점 처리의<span lang=EN-US> HLSL</span>과 마찬가지로 이들 함수 또한 <span
lang=EN-US>D3DXCompileShader() </span>함수를 사용해서 컴파일을 해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LPD3DXBUFFER</span><span lang=EN-US>&nbsp;&nbsp; pShd&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LPD3DXBUFFER</span><span lang=EN-US>&nbsp;&nbsp; pErr&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hr = </span><span
lang=EN-US style='color:#880000'>D3DXCompileShader</span><span lang=EN-US>(sHlsl,
iLen</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>NULL</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:fuchsia'>&quot;PxlPrc&quot;</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>//
</span><span style='color:green'>시작 함수</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:fuchsia'>&quot;ps_1_1&quot;</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>//
</span><span style='color:green'>쉐이더 버전</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
dwFlags</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
&amp;pShd &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>컴파일 쉐이더</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
&amp;pErr &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// Error</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
&amp;m_pTbl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>상수 테이블</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>D3DXCompileShader() </span>함수는<span
lang=EN-US> HLSL</span>로 작성한 정점 쉐이더<span lang=EN-US>, </span>픽셀 쉐이더 등을 컴파일하며 이후의
절차적 텍스처에 대한 쉐이더 또한 컴파일을 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>간단히 출력하는 쉐이더 코드는<span lang=EN-US> ps.1.1 </span>으로도 충분하지만 현재
대부분의 그래픽 카드는<span lang=EN-US> 2.0 </span>이상지원이 되므로 <span lang=EN-US>D3DXCompileShader()
</span>함수의 쉐이더 버전 인수에<span lang=EN-US> ps_2_0 </span>이상으로 설정하는 것이 좋습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>D3DXCompileShader() </span>함수는 단순하게 쉐이더만 컴파일하므로
컴파일 결과를 가지고 픽셀 쉐이더를 생성해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>LPDIRECT3DPIXELSHADER9</span><span
lang=EN-US> m_pPs;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Pixel Shader</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>D3DXCompileShader</span><span
lang=EN-US>(…, &amp;pShd,…);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>CreatePixelShader</span><span lang=EN-US>( (</span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US>*)pShd-&gt;</span><span
lang=EN-US style='color:#880000'>GetBufferPointer</span><span lang=EN-US>() ,
&amp;m_pPs);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>픽셀 쉐이더 사용<span lang=EN-US>, </span>즉<span lang=EN-US>, </span>프로그램
가능한 픽셀 처리 파이프라인 이용은 저 수준과 동일하며 사용이 끝나면<span lang=EN-US> NULL </span>인수를 이용해서 사용
해지를 알립니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetPixelShader</span><span lang=EN-US>(m_pPs);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Pixel Shader </span><span style='color:green'>사용</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>DrawPrimitive</span><span lang=EN-US>(…); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Rendering</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>SetPixelShader</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Pixel Shader </span><span style='color:green'>해제</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=212 height=159
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image015.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>픽셀 쉐이더 기초<span lang=EN-US>: <a
href="https://github.com/3dapi/bs25_shader2/raw/master/hs3_pxl1_basic.zip">hs3_pxl1_basic.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>1.4.2 </span><span
style='font-size:12.0pt'>픽셀 처리 사용자 함수</span><span lang=EN-US> </span></p>

<p class=MsoNormal>저 수준은 서로 다른 처리<span lang=EN-US> rootin</span>을 하나로 작성하는 것이 쉽지가
않았습니다<span lang=EN-US>. </span>하지만<span lang=EN-US> HLSL</span>을 사용하면<span
lang=EN-US> if </span>문과 함수로 여러 처리에 대해서 쉽게 작성할 수 있습니다<span lang=EN-US>. </span>이에
대한 예로 색상의 반전<span lang=EN-US>, </span>단색화 등을<span lang=EN-US> HLSL</span>로 작성해 봅시다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US> g_nPxlPrc = </span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>픽셀 처리 타입</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US>&nbsp; PxlInverse(</span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Input) &nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>색상 반전</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US> - Input;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US>&nbsp; PxlMonotone(</span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> InColor) &nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>단색화</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Out = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> d = </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>299</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>587</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>114</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> t = InColor;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= </span><span lang=EN-US style='color:#880000'>dot</span><span lang=EN-US>(d,
t);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.w
= </span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>픽셀<span lang=EN-US>
main </span>처리 함수</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> PxlPrc( </span><span
lang=EN-US style='color:#A000A0'>in</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> iDif : </span><span
lang=EN-US style='color:blue'>COLOR0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// From Vertex Processing</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>) : </span><span
lang=EN-US style='color:blue'>COLOR0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Out=</span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>== g_nPxlPrc)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= PxlInverse(iDif);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US> == g_nPxlPrc)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= PxlMonotone(iDif);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= iDif;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>색상의 반전은<span lang=EN-US> 1- </span>색상으로 처리하며 <span
lang=EN-US>PxlInverse() </span>함수를 이를 구현하고 있습니다<span lang=EN-US>. </span>단색화는<span
lang=EN-US> r, g, b</span>에 대해서 적절한 값을 곱해주고 더해서 이 값을 동일하게<span lang=EN-US> r,
g, b</span>에 적용하는 것으로<span lang=EN-US> PxlMonotone()</span>함수가 이를 처리하고 있습니다<span
lang=EN-US>. PxlPrc() </span>함수는 픽셀 처리의<span lang=EN-US> main </span>함수 이며 색상 처리
종류<span lang=EN-US>(g_nPxlrc)</span>에 따라서 원래의 색상<span lang=EN-US>, </span>반전<span
lang=EN-US>, </span>단색화를 해당 함수를 불러서 처리하고 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=182 height=136
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image016.gif">&nbsp;<img border=0 width=182 height=136
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image017.gif">&nbsp;<img border=0 width=183 height=136
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image018.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>색상 반전<span lang=EN-US>, </span>단색화<span
lang=EN-US>: <a href="https://github.com/3dapi/bs25_shader2/raw/master/hs3_pxl2_inv_mono.zip">hs3_pxl2_inv_mono.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>1.4.3 </span><span
style='font-size:12.0pt'>텍스처 처리</span></p>

<p class=MsoNormal>텍스처에서 샘플링을 담당하는 샘플러를 픽셀 쉐이더에서 다음과 같이 지정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>sampler</span><span
lang=EN-US> smpDif;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 샘플러를 지정하고 나서<span lang=EN-US> tex2D() </span>와 같은 샘플링 함수에
텍스처 좌표를 입력하면 텍스처에서 색상을 가져오게 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> PxlPrc( </span><span
lang=EN-US style='color:#A000A0'>in</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Tx0 : </span><span
lang=EN-US style='color:blue'>TEXCOORD0 </span><span lang=EN-US
style='color:green'>/* </span><span style='color:green'>텍스처 좌표<span lang=EN-US>
*/</span></span><span lang=EN-US>) : </span><span lang=EN-US style='color:blue'>COLOR0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(smpDif, Tx0);&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>샘플링</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=213 height=159
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image019.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>샘플러<span lang=EN-US> register </span>선언<span
lang=EN-US>: <a href="https://github.com/3dapi/bs25_shader2/raw/master/hs3_pxl3_sampler1.zip">hs3_pxl3_sampler1.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>픽셀 쉐이더의 색상 처리를 연습하는 여러가지 방법 중의 하나가<span lang=EN-US> Post
Effect</span>에서 사용되는 단색화<span lang=EN-US>(Monotone)</span>와 흐림 효과<span
lang=EN-US>(Blur Effect)</span>를 구현해 보는 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이전에 단색화는 색상의<span lang=EN-US> r, g, b</span>에 적당한 비중 값을 곱한 후에
이 값을 다시<span lang=EN-US> r, g, b</span>에 설정하는 것이라 했습니다<span lang=EN-US>. </span>또한<span
lang=EN-US> r, g, b</span>에 대한 비중 값과 픽셀의<span lang=EN-US> r, g, b</span>를 벡터로 생각하고
내적<span lang=EN-US>(Dot Product)</span>를 하면 곧 단색화의 색상이 된가도 했습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><i>단색화 값 <span lang=EN-US>= </span>단색화 비중<span lang=EN-US>(r,
g, b), </span>픽셀 색상<span lang=EN-US>(r, g, b)</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 단색화 값에 정해진 색상을 곱하게 되면 화면에 특정한 색상으로 장면을 연출합니다<span
lang=EN-US>. </span>단색화의<span lang=EN-US> HLSL </span>구현을 위해서 이전에 저 수준으로 만들었던 예제를
<span lang=EN-US>HLSL</span>로 바꾸면 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> SampDif : </span><span
lang=EN-US style='color:#880000'>register</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>s0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US>&nbsp; Out=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0F</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US>&nbsp; MonoColor ={</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>5F</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0F</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0F</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0F</span><span lang=EN-US>};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>단색화 색상</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US>&nbsp; MonoWeight={</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>299F</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>587F</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>114F</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0F</span><span lang=EN-US>};&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>단색화 비중</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Out = </span><span
lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>( SampDif, Tx0 );&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>샘플링</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Out = </span><span
lang=EN-US style='color:#880000'>dot</span><span lang=EN-US>(Out, MonoWeight);&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>내적<span
lang=EN-US>(dot)</span>로 단색화</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Out *=
MonoColor;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>단색화 색상을 곱함</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>return</span><span
lang=EN-US> Out;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=241 height=181
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image020.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>단색화<span lang=EN-US>: <a
href="https://github.com/3dapi/bs25_shader2/raw/master/hs4_pxl1_mono.zip">hs4_pxl1_mono.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>흐림 효과<span lang=EN-US>(Blur Effect)</span>는 인접한 픽셀에 비중 값을 곱하고
더해서 최종 색상을 만는 것입니다<span lang=EN-US>. </span>특히<span lang=EN-US> Gaussian Blur</span>은
인접한 픽셀까지의 거리를 가지고 비중 값을<span lang=EN-US> exp()</span>함수로 결정하며 수식으로 표현하면 다음과 같습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>최종 색상<span lang=EN-US> = <sub><img border=0 width=132
height=27 src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image021.gif"></sub></span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>HLSL</span>은<span lang=EN-US> exp() </span>함수를
지원합니다<span lang=EN-US>. </span>인접한 픽셀은 텍스처의 좌표를 변화시킨 후에<span lang=EN-US>
tex2D() </span>와 같은 샘플링 함수를 가지고 얻으며 이것을 반복적으로<span lang=EN-US> for </span>문 등을 이용해서
적용합니다<span lang=EN-US>. </span>다음은<span lang=EN-US> Gaussian Blur</span>를<span
lang=EN-US> HLSL</span>로 구현한 예 입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> SampDif : </span><span
lang=EN-US style='color:#880000'>register</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>s0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US>&nbsp; Out=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0F</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>for</span><span lang=EN-US>(x, </span><span lang=EN-US
style='color:blue'>…</span><span lang=EN-US>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US> T = Tx0;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T.x
+= (</span><span lang=EN-US style='color:red'>2</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>f</span><span lang=EN-US> * x)/</span><span
lang=EN-US style='color:red'>1024</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
+= </span><span lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(
SampDif, T ) * </span><span lang=EN-US style='color:#880000'>exp</span><span
lang=EN-US>( (-x*x)/</span><span lang=EN-US style='color:red'>8</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>f</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Out *= </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>24F</span><span lang=EN-US>;&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>전체 명도를 낮춤</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image022.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Blur </span>효과<span lang=EN-US>: <a
href="https://github.com/3dapi/bs25_shader2/raw/master/hs4_pxl2_blur.zip">hs4_pxl2_blur.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>단색화와 흐림 효과는 그 자체만으로 의미가 있지만 코드의 길이가 길지 않기 때문에 이 둘을 합쳐서 표현하는 것도
좋습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> SampDif : </span><span
lang=EN-US style='color:#880000'>register</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>s0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US>&nbsp; Out=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0F</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>for</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US> x=-</span><span lang=EN-US
style='color:red'>4</span><span lang=EN-US>; x&lt;=</span><span lang=EN-US
style='color:red'>4</span><span lang=EN-US>; ++x)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US> T = Tx0;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T.x
+= (</span><span lang=EN-US style='color:red'>2</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>f</span><span lang=EN-US> * x)/</span><span
lang=EN-US style='color:red'>1024</span><span lang=EN-US>.f;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>텍스처 좌표를 변화시킨다</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
+= </span><span lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(
SampDif, T ) * </span><span lang=EN-US style='color:#880000'>exp</span><span
lang=EN-US>( (-x*x)/</span><span lang=EN-US style='color:red'>8</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>f</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Out = </span><span
lang=EN-US style='color:#880000'>dot</span><span lang=EN-US>(Out, MonoWeight); &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>단색화</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Out *=
MonoColor;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>단색에 적용할 색상을 곱함</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image023.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>단색화<span lang=EN-US> + </span>흐림
효과<span lang=EN-US>: <a href="https://github.com/3dapi/bs25_shader2/raw/master/hs4_pxl3_mono+blur.zip">hs4_pxl3_mono+blur.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>흐림 효과와 단색화를 합쳐 놓으니까 더 멋진 장면을 만들어 냈습니다<span lang=EN-US>. </span>게임의
장면들은 이렇게 작은 부분을 결합해서 만드는 경우도 많이 있으니 꾸준히 연습하기 바라며 다음으로 다중 처리를<span lang=EN-US>
HLSL</span>로 구현해 보도록 하겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다중 텍스처 처리<span lang=EN-US>(Multi-Texturing)</span>를 하려면 샘플러를
샘플러 레지스터에 명시적으로 선언을 해야 합니다<span lang=EN-US>. </span>이 때<span lang=EN-US>
register() </span>함수를 이용합니다<span lang=EN-US>. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> smp0 : </span><span
lang=EN-US style='color:#880000'>register</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>s0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> smp1 : </span><span
lang=EN-US style='color:#880000'>register</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>s1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>sampler</span><span
lang=EN-US> smp2 : </span><span lang=EN-US style='color:#880000'>register</span><span
lang=EN-US>(</span><span lang=EN-US style='color:blue'>s2</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal>이렇게 샘플러를 선언하면<span lang=EN-US>
pDevice-&gt;SetTexure(StageIndex, pTexture)</span>와 같은 문장을 실행 할 때<span
lang=EN-US> Stage Index</span>에 해당하는 레지스터에 텍스처 포인터가 자리잡고 이 텍스처를 샘플러가 샘플링합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>텍스처 샘플링에 대한 내장 함수는<span lang=EN-US> tex1D, tex2D, tex3D,
tex2Dproj, tex3Dproj, texCUBE </span>등이 있으며 가장 많이 사용하는 함수는<span lang=EN-US> 2</span>차원
텍스처에 대한<span lang=EN-US> tex2D() </span>함수입니다<span lang=EN-US>. </span>모든 샘플링 함수는
샘플러와 텍스처 좌표를 인수로 받습니다<span lang=EN-US>. </span>따라서 픽셀 처리의<span lang=EN-US> main
</span>함수는 정점 처리에서 만들어진 색상뿐만 아니라 텍스처 좌표도 같이 받아야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>Rasterizing </span>으로 만들어진 색상과 텍스처의 색상을<span
lang=EN-US> modulate</span>하는 과정을 다음과 같이 작성할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> smp0 : </span><span
lang=EN-US style='color:#880000'>register</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>s0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> iDif: COLOR, </span><span
lang=EN-US style='color:blue'>float2</span><span lang=EN-US> Tex0: </span><span
lang=EN-US style='color:blue'>TEXCOORD0</span><span lang=EN-US>) : COLOR</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> iDif * </span><span
lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(smp0, Tex0);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>만약<span lang=EN-US> modulate2x </span>를 구현하고자 하면 출력의 결과에<span
lang=EN-US> 2</span>를 곱하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Out = </span><span
lang=EN-US style='color:#880000'>tex2D</span><span lang=EN-US>(smp0, Tex0);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Out *= iDif;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Out *= </span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>return</span><span
lang=EN-US> Out;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=213 height=158
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image024.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;MODULATE2X: <a
href="https://github.com/3dapi/bs25_shader2/raw/master/hs3_pxl3_sampler2_earth.zip">hs3_pxl3_sampler2_earth.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>HLSL</span>을 사용하면 고정 기능 파이프라인의 <span
lang=EN-US>MODULATE4X, ADD, SUBSTRACT, ADDSIGNED </span>등의<span lang=EN-US>
FLAG</span>로 다중 처리를 지시한 내용을 간단한 산술 연산으로 구현할 수 있어서 고정 파이프라인에서 처리하는 것보다 여러모로 잇점이 많습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>고정 기능 파이프라인에서 다중 처리에 대한 텍스처 샘플링의 상태 값을 설정하는 것은 간단하지만<span
lang=EN-US> D3D</span>의<span lang=EN-US> FLAG </span>값들을 기억하기가 어려웠습니다<span
lang=EN-US>. </span>그런데<span lang=EN-US> HLSL</span>을 사용하면 각 샘플러에 대해서 필터링과 어드레싱을
설정할 수가 있습니다<span lang=EN-US>. </span>샘플러의 상태를 설정하기 위해서<span lang=EN-US>
sampler_state</span>를 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> smpDif0 : </span><span
lang=EN-US style='color:#880000'>register</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>s0</span><span lang=EN-US>) = </span><span
lang=EN-US style='color:blue'>sampler_state</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
MinFilter = </span><span lang=EN-US style='color:fuchsia'>POINT</span><span
lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// Filtering</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
MagFilter = </span><span lang=EN-US style='color:fuchsia'>POINT</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
MipFilter = </span><span lang=EN-US style='color:fuchsia'>POINT</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
AddressU = </span><span lang=EN-US style='color:fuchsia'>Wrap</span><span
lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Addressing</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
AddressV = </span><span lang=EN-US style='color:fuchsia'>Wrap</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> smpDif1 : </span><span
lang=EN-US style='color:#880000'>register</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>s1</span><span lang=EN-US>) = </span><span
lang=EN-US style='color:blue'>sampler_state</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
MinFilter = </span><span lang=EN-US style='color:fuchsia'>NONE</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
MagFilter = </span><span lang=EN-US style='color:fuchsia'>NONE</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
MipFilter = </span><span lang=EN-US style='color:fuchsia'>NONE</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
AddressU = </span><span lang=EN-US style='color:fuchsia'>Wrap</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;
AddressV = </span><span lang=EN-US style='color:fuchsia'>Wrap</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image025.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Multi-Texturing: <a
href="https://github.com/3dapi/bs25_shader2/raw/master/hs5_pxl4_multi_tex1.zip">hs5_pxl4_multi_tex1.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>앞서 산술 연산으로 <span lang=EN-US>Multi-Texturing</span>을 쉽게 구현할 수
있다고 했습니다<span lang=EN-US>. </span>다음의<span lang=EN-US> HLSL </span>코드는<span
lang=EN-US> 2</span>개의 텍스처를 여러 상황에 대해서 간단한 산술 연산으로 구현한 예입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>sampler</span><span
lang=EN-US> SampDif0 : </span><span lang=EN-US style='color:#880000'>register</span><span
lang=EN-US>(</span><span lang=EN-US style='color:blue'>s0</span><span
lang=EN-US>) = </span><span lang=EN-US style='color:blue'>sampler_state</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>sampler</span><span lang=EN-US> SampDif1 : </span><span
lang=EN-US style='color:#880000'>register</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>s1</span><span lang=EN-US>) = </span><span
lang=EN-US style='color:blue'>sampler_state</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; m_nMulti;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>PxlPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> Tx0 : </span><span
lang=EN-US style='color:blue'>TEXCOORD0</span><span lang=EN-US>) : </span><span
lang=EN-US style='color:blue'>COLOR0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Out= </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> t0 = </span><span
lang=EN-US style='color:blue'>tex2D</span><span lang=EN-US>( SampDif0, Tx0 );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Sampling m_TxDif0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> t1 = </span><span
lang=EN-US style='color:blue'>tex2D</span><span lang=EN-US>( SampDif1, Tx0 );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Sampling m_TxDif1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> == m_nMulti)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= t0;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US> == m_nMulti) Out = t1;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US> == m_nMulti) Out = t0 *
t1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// Modulate</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US> == m_nMulti) Out = t0 *
t1 * </span><span lang=EN-US style='color:red'>2</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Modulate 2x</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US> == m_nMulti) Out = t0 *
t1 * </span><span lang=EN-US style='color:red'>4</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Modulate 4x</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>5</span><span lang=EN-US> == m_nMulti) Out = t0 +
t1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// Add</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>6</span><span lang=EN-US> == m_nMulti) Out = t0 +
t1 - .</span><span lang=EN-US style='color:red'>5</span><span lang=EN-US>;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Add signed</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>7</span><span lang=EN-US> == m_nMulti) Out =(t0 +
t1 - .</span><span lang=EN-US style='color:red'>5</span><span lang=EN-US>)*</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>; </span><span
lang=EN-US style='color:green'>// Add signed</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>8</span><span lang=EN-US> == m_nMulti) Out = t0 +
t1 - t0*t1; </span><span lang=EN-US style='color:green'>// add smooth</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>9</span><span lang=EN-US> == m_nMulti) Out = t0 -
t1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// sub</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>10</span><span lang=EN-US>== m_nMulti) Out = t1 -
t0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// sub</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>11</span><span lang=EN-US>== m_nMulti) Out = </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US> - t0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Inverse t0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>12</span><span lang=EN-US>== m_nMulti) Out = </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US> - t1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Inverse t1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>13</span><span lang=EN-US>== m_nMulti) Out = </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US> - (t0 + t1);&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Inverse (t0+t1)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image026.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Multi-Texturing </span>연습<span
lang=EN-US>: <a href="https://github.com/3dapi/bs25_shader2/raw/master/hs5_pxl4_multi_tex2.zip">hs5_pxl4_multi_tex2.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>1.4.4 Procedural
Texture</span></p>

<p class=MsoNormal><span lang=EN-US>HLSL</span>의 흥미로운 점은 쉐이더로 작성한 픽셀 처리를 텍스처에 저장할
수가 있습니다<span lang=EN-US>. </span>이 때 사용되는 함수가 <span lang=EN-US>D3DXFillTextureTX()
</span>함수 입니다<span lang=EN-US>. </span>텍스처의 픽셀을 어떤 알고리듬<span lang=EN-US>(Algorithm)</span>에
의해서 컴퓨터의 처리에의해 만들어진 텍스처를 절차적 텍스처<span lang=EN-US>(Procedural Texture)</span>라 합니다<span
lang=EN-US>. HLSL</span>은<span lang=EN-US> Algorithm</span>이고 이를 적용하게 되면 절차적 텍스처가
됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>절차적 텍스처에 대한 쉐이더를 작성할 때 픽셀의 좌표는<span lang=EN-US> [0, 1] </span>범위가
되며 픽셀 처리에 대한<span lang=EN-US> main </span>함수의 입력<span lang=EN-US> Semantic</span>은
텍스처 좌표<span lang=EN-US> TEXCOORD</span>가 아닌 위치<span lang=EN-US> POSITION</span>으로
합니다<span lang=EN-US>. Position </span>값은 뷰포트의 영역을<span lang=EN-US> [0, 1]</span>로
바라본 값입니다<span lang=EN-US>. </span>또한 쉐이더가 픽셀의 색상을 결정하므로 함수의 반환 값은<span
lang=EN-US> float4 </span>형으로 하고<span lang=EN-US> Semantic</span>은<span
lang=EN-US> COLOR</span>로 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>TxlPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>float2</span><span lang=EN-US> In : </span><span lang=EN-US
style='color:blue'>POSITION</span><span lang=EN-US>) : </span><span lang=EN-US
style='color:blue'>COLOR0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>&nbsp; Out;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; …</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>절차적 텍스처에 대한 쉐이더를<span lang=EN-US> HLSL</span>로 작성하게 되면 정점 쉐이더<span
lang=EN-US>, </span>픽셀 쉐이더와 마찬가지로 <span lang=EN-US>D3DXCompileShaderFromFile() </span>함수를
이용해서 쉐이더를 컴파일하고 쉐이더 버전에 텍셀 버전을 입력합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>D3DXCompileShaderFromFile</span><span
lang=EN-US>(</span><span lang=EN-US style='color:fuchsia'>&quot;</span><span
style='color:fuchsia'>쉐이더 파일<span lang=EN-US>&quot;</span></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>NULL</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:fuchsia'>&quot;TxlPrc&quot;</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>//
</span><span style='color:green'>텍셀<span lang=EN-US> main </span>함수</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:fuchsia'>&quot;tx_1_0&quot;</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>//
</span><span style='color:green'>텍셀 버전</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
dwFlags, &amp;pShd, &amp;pErr, </span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>절차적 텍스처는<span lang=EN-US> D3D Device</span>의<span
lang=EN-US> CreateTexture() </span>함수 또는 <span lang=EN-US>D3DXCreateTexture() </span>함수롤
이용해서 생성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>D3DXCreateTexture</span><span
lang=EN-US>(m_pDev, </span><span lang=EN-US style='color:red'>128</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>128</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>D3DFMT_UNKNOWN</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>D3DPOOL_MANAGED</span><span
lang=EN-US>, &amp;m_pTx);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>텍스처의 픽셀에대해서 텍셀 쉐이더를 적용하기 위해 <span lang=EN-US>D3DXFillTextureTX()
</span>함수를 호출하면 절차적 텍스처가 완성이 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>D3DXFillTextureTX</span><span
lang=EN-US>(m_pTx, (</span><span lang=EN-US style='color:blue'>DWORD</span><span
lang=EN-US>*)pShd-&gt;GetBufferPointer(), </span><span lang=EN-US
style='color:#A000A0'>NULL</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=182
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image027.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Procedural </span>텍스처<span lang=EN-US>:
<a href="https://github.com/3dapi/bs25_shader2/raw/master/hs5_pxl4_procedual1.zip">hs5_pxl4_procedual1.zip</a></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>화면 잡음과 같은<span lang=EN-US> Post Effect</span>나<span
lang=EN-US> Normal Mapping </span>등에서는 정점의 텍스처 좌표에서 공식에 따른 위치에 텍스처 좌표를 다시 설정하고 샘플링
작업을 진행하는 경우가 있습니다<span lang=EN-US>. </span>이러한 경우에 공식을 직접 적용하는 방법도 있지만 때로는 공식의 결과
값을 텍스처에 저장해서 처리 속도를 빠르게 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/bs25_shader2/raw/master/hs4_pxl4_procedual2.zip">hs4_pxl4_procedual2.zip</a></span>는<span
lang=EN-US> Noise </span>텍스처를 생성하는 예제로<span lang=EN-US> random </span>값을 만들기 위해서<span
lang=EN-US> noise() </span>함수를 사용하고 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>static</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>float</span><span lang=EN-US> m_Delta = </span><span
lang=EN-US style='color:red'>2000</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0F</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>float4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>TxlPrc</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>float2</span><span lang=EN-US> Pos : </span><span
lang=EN-US style='color:blue'>POSITION</span><span lang=EN-US>) : </span><span
lang=EN-US style='color:blue'>COLOR0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US> Out = (</span><span
lang=EN-US style='color:blue'>float4</span><span lang=EN-US>)</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.r
= </span><span lang=EN-US style='color:#880000'>noise</span><span lang=EN-US>((Pos+</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>) * m_Delta);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.g
= </span><span lang=EN-US style='color:#880000'>noise</span><span lang=EN-US>((Pos+</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>) * m_Delta);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.b
= </span><span lang=EN-US style='color:#880000'>noise</span><span lang=EN-US>((Pos+</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>) * m_Delta);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= </span><span lang=EN-US style='color:#880000'>normalize</span><span
lang=EN-US>(Out);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out
= (Out + </span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>) *
</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>5F</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Out.w
= </span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> Out;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=240 height=180
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image028.gif">&nbsp;<img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image029.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Procedural Noise </span>텍스처<span
lang=EN-US>: <a href="https://github.com/3dapi/bs25_shader2/raw/master/hs5_pxl4_procedual2.zip">hs5_pxl4_procedual2.zip</a> m_Delta
= 4, m_Delta = 2000&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Post Effect </span>연습에서 사각형<span
lang=EN-US>, </span>은행잎<span lang=EN-US>, </span>직소 등의 패턴 효과에서 일정한 영역에 대해서 같은 픽셀을
적용합니다<span lang=EN-US>. </span>영역 중심에서 벗어나는 텍스처 좌표는 중심 쪽으로 상대적으로 이동할 수 있도록 해야하는데
이 값<span lang=EN-US>(Delta)</span>을 미리 텍스처에 저장합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>텍스처에서 픽셀을 가져와서 새로운 좌표로 다음의 공식을 이용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i><span lang=EN-US>New(U, V) = Old(U, V) + Delta( r-0.5,
g-0.5)</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/bs25_shader2/raw/master/hs5_pxl4_procedual3.zip">hs5_pxl4_procedual3.zip</a>
</span>예제는 텍스처의 중앙에서 샘플링이 가능하도록 <span lang=EN-US>Delta </span>값을 저장하는 예입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=182
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image030.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Procedural Delta </span>텍스처<span
lang=EN-US>: <a href="https://github.com/3dapi/bs25_shader2/raw/master/hs5_pxl4_procedual3.zip">hs5_pxl4_procedual3.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 텍스처를 사용하는 예제는<span lang=EN-US> Post Effect</span>의 은행잎<span
lang=EN-US>, </span>직소 등을 살펴보기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>1.5 ILcEffect </span><span
style='font-size:14.0pt'>만들기</span></p>

<p class=MsoNormal>저 수준 쉐이더에서는 하나의 모듈은 하나의 파일 또는 단일 문자열에서 처리했었습니다<span
lang=EN-US>. </span>그런데<span lang=EN-US> HLSL</span>은 정점과 픽셀 처리에 대한<span
lang=EN-US> main </span>함수들을 하나의 파일에 작성할 수 있고 <span lang=EN-US>D3DXCompileShaderFromFile()
</span>에서 컴파일 할 때 원하는<span lang=EN-US> main </span>함수를 지정하면 해당 함수와 관련된 내용만 컴파일 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image031.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>정점 쉐이더<span lang=EN-US>, </span>픽셀
쉐이더를 하나의 파일에 작성한 예<span lang=EN-US>: <a href="https://github.com/3dapi/bs25_shader2/raw/master/hs6_vtxpxl.zip">hs6_vtxpxl.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것은 여러가지 장점이 있습니다<span lang=EN-US>. D3D</span>가 구조상 정점과 픽셀 쉐이더가
분리되어 있다하더라도 게임에서는 이 둘을 한꺼번에 사용되는 경우가 많이 있으므로 이 둘을 하나의 모듈 안에 구현되어 있으면 편리하며 우리는 이를
위해서 고 수준 언어로 작성된 정점과 픽셀 쉐이더를 <span lang=EN-US>ILcEffect</span>로 추상화 해 봅시다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>HLSL </span>과 저 수준 쉐이더는 언어의 형식만 다르기 때문에 저 수준에서
추상화한 방식이 거의 그대로 활용될 수 있습니다<span lang=EN-US>. </span>변화된 것은 쉐이더의 상수 설정에 대한 구현이 상수
테이블을 사용하고 정점 쉐이더와 픽셀 쉐이더의<span lang=EN-US> main </span>함수를 지정하는 것입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>interface</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>ILcEffect</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>Create</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* =</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>,</span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* =</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>,</span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* =</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>,</span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* =</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>)=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>Destroy</span><span lang=EN-US>()=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>Begin</span><span lang=EN-US>()=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>End</span><span lang=EN-US>()=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>SetupDecalarator</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US> dFVF)=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>SetMatrix</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>* sName, </span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>* v)=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>SetVector</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>* sName, </span><span
lang=EN-US style='color:blue'>D3DXVECTOR4</span><span lang=EN-US>* v)=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>SetColor</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>* sName, </span><span
lang=EN-US style='color:blue'>D3DXCOLOR</span><span lang=EN-US>* v)=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>SetFloat</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>* sName, </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US> v) =</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>ILcEffect </span>객체를 생성하는 함수는 다음과 같습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>int</span><span
lang=EN-US> </span><span lang=EN-US style='color:#880000'>LcHlsl_CreateShader</span><span
lang=EN-US>(</span><span lang=EN-US style='color:blue'>char</span><span
lang=EN-US>* sCmd, </span><span lang=EN-US style='color:blue'>ILcEffect</span><span
lang=EN-US>** pData, …);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>ILcEffect</span>를 구현한<span lang=EN-US>
CHlslEffect</span>은 지정된 쉐이더 함수를 컴파일하고 정점 선언자<span lang=EN-US>, </span>정점 쉐이더<span
lang=EN-US>, </span>픽셀 쉐이더 객체를 생성합니다<span lang=EN-US>. </span>또한 상수 레지스터 설정을 상수
테이블로 구현합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>LPD3DXCONSTANTTABLE</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp; m_pTbl; </span><span lang=EN-US style='color:
green'>// </span><span style='color:green'>정점 쉐이더를 위한 상수 테이블</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CHlslEffect</span><span lang=EN-US>::</span><span
lang=EN-US style='color:#880000'>SetMatrix</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>* sName, </span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>* v)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> m_pTbl-&gt;</span><span
lang=EN-US style='color:#880000'>SetMatrix</span><span lang=EN-US>(m_pDev,
sName, v);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CHlslEffect</span><span lang=EN-US>::</span><span
lang=EN-US style='color:#880000'>SetVector</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>* sName, </span><span
lang=EN-US style='color:blue'>D3DXVECTOR4</span><span lang=EN-US>* v)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> m_pTbl-&gt;</span><span
lang=EN-US style='color:#880000'>SetVector</span><span lang=EN-US>(m_pDev,
sName, v);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CHlslEffect</span><span lang=EN-US>::</span><span
lang=EN-US style='color:#880000'>SetColor</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>* sName, </span><span
lang=EN-US style='color:blue'>D3DXCOLOR</span><span lang=EN-US>* v)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> m_pTbl-&gt;</span><span
lang=EN-US style='color:#880000'>SetVector</span><span lang=EN-US>(m_pDev,
sName, (</span><span lang=EN-US style='color:blue'>D3DXVECTOR4</span><span
lang=EN-US>*)v);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CHlslEffect</span><span lang=EN-US>::</span><span
lang=EN-US style='color:#880000'>SetFloat</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>* sName, </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US> v)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> m_pTbl-&gt;</span><span
lang=EN-US style='color:#880000'>SetFloat</span><span lang=EN-US>(m_pDev,
sName, v);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>좀 더 정교하게 작성하려면 정점 쉐이더에 대한 상수 테이블뿐만 아니라 픽셀 쉐이더의 상수 테이블도 같이 구현하는
것이 좋습니다<span lang=EN-US>. <a href="https://github.com/3dapi/bs25_shader2/raw/master/hs6_ILcEffect.zip">hs6_ILcEffect.zip</a></span>는
<span lang=EN-US>ILcEffect</span>를 구현하고 <span lang=EN-US> Glow </span>효과를
보여주고 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader2/raw/master/bs25_shader2.files/image032.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;ILcEffect</span>의 구현과<span lang=EN-US>
Glow </span>효과<span lang=EN-US>: <a href="https://github.com/3dapi/bs25_shader2/raw/master/hs6_ILcEffect.zip">hs6_ILcEffect.zip</a>&gt;</span></p>
<br>
<br>

</div>

<?php
	include '../base/lc_tail.php';
?>
